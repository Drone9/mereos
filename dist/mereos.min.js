import i18next from "i18next";
import "../assets/css/modal.css";
import { runSystemDiagnostics } from "./systemdiagnostic";
import { IdentityVerificationScreenOne } from "./identityVerificationScreenOne";
import { IdentityVerificationScreenTwo } from "./identityVerificationScreenTwo";
import { IdentityVerificationScreenThree } from "./identityVerificationScreenThree";
import { IdentityVerificationScreenFour } from "./identityVerificationScreenFour";
import { IdentityVerificationScreenFive } from "./IdentityVerificationScreenFive";
import { ExamPreparation } from "./examPreprationScreen";
import { addSectionSessionRecord, cleanupZendeskWidget, convertDataIntoParse, getSecureFeatures, handlePreChecksRedirection, loadZendeskWidget, registerEvent, updatePersistData, updateThemeColor } from "../utils/functions";
import { PrevalidationInstructions } from "./PrevalidationInstructions";
import { ASSET_URL, languages, preChecksSteps, prevalidationSteps, systemDiagnosticSteps } from "../utils/constant";
import { MobileProctoring } from "./mobileProctoring";
import "notyf/notyf.min.css";
let modal = document.createElement("div"),
  modalContent = (modal.className = "modal", document.createElement("div")),
  tabsContainer = (modalContent.className = "modal-content", modal.appendChild(modalContent), document.createElement("div")),
  tabContentsWrapper = (tabsContainer.className = "tabs-container", modalContent.appendChild(tabsContainer), document.createElement("div")),
  ExamPreparationContainer = (tabContentsWrapper.className = "tab-contents-wrapper", document.createElement("div")),
  SystemDiagnosticsContainer = (ExamPreparationContainer.className = "tab-content", ExamPreparationContainer.id = "ExamPreparation", document.createElement("div")),
  IdentityVerificationScreenOneContainer = (SystemDiagnosticsContainer.className = "tab-content", SystemDiagnosticsContainer.id = "runSystemDiagnostics", document.createElement("div")),
  IdentityVerificationScreenTwoConatiner = (IdentityVerificationScreenOneContainer.className = "tab-content", IdentityVerificationScreenOneContainer.id = "IdentityVerificationScreenOne", document.createElement("div")),
  IdentityVerificationScreenThreeContainer = (IdentityVerificationScreenTwoConatiner.className = "tab-content", IdentityVerificationScreenTwoConatiner.id = "IdentityVerificationScreenTwo", document.createElement("div")),
  IdentityVerificationScreenFourContainer = (IdentityVerificationScreenThreeContainer.className = "tab-content", IdentityVerificationScreenThreeContainer.id = "IdentityVerificationScreenThree", document.createElement("div")),
  IdentityVerificationScreenFiveContainer = (IdentityVerificationScreenFourContainer.className = "tab-content", IdentityVerificationScreenFourContainer.id = "IdentityVerificationScreenFour", document.createElement("div")),
  PrevalidationinstructionContainer = (IdentityVerificationScreenFiveContainer.className = "tab-content", IdentityVerificationScreenFiveContainer.id = "IdentityVerificationScreenFive", document.createElement("div")),
  identitySteps = (PrevalidationinstructionContainer.className = "tab-content", PrevalidationinstructionContainer.id = "Prevalidationinstruction", document.createElement("div")),
  mobileProctingConatiner = (identitySteps.className = "steps-container", identitySteps.id = "modal-steps-container", document.createElement("div")),
  schoolTheme = (identitySteps.className = "mobile-procting-conatiner", identitySteps.id = "mobileProctingConatiner", tabContentsWrapper.appendChild(identitySteps), tabContentsWrapper.appendChild(ExamPreparationContainer), tabContentsWrapper.appendChild(SystemDiagnosticsContainer), tabContentsWrapper.appendChild(IdentityVerificationScreenOneContainer), tabContentsWrapper.appendChild(IdentityVerificationScreenTwoConatiner), tabContentsWrapper.appendChild(IdentityVerificationScreenThreeContainer), tabContentsWrapper.appendChild(IdentityVerificationScreenFourContainer), tabContentsWrapper.appendChild(IdentityVerificationScreenFiveContainer), tabContentsWrapper.appendChild(PrevalidationinstructionContainer), tabContentsWrapper.appendChild(mobileProctingConatiner), modalContent.appendChild(tabContentsWrapper), void 0 !== localStorage.getItem("schoolTheme") ? JSON.parse(localStorage.getItem("schoolTheme")) : {}),
  navigate = e => {
    showTab(e);
  },
  openModal = e => {
    document.body.appendChild(modal), modal.style.display = "block";
    var t = handlePreChecksRedirection(e),
      t = (null === JSON.parse(localStorage.getItem("preChecksSteps")) && localStorage.setItem("preChecksSteps", JSON.stringify(preChecksSteps)), showTab(t, e), convertDataIntoParse("session")),
      e = (startSession(t), document.createElement("div")),
      t = (e.className = "header", document.createElement("section"));
    t.className = "dropdown";
    let n = schoolTheme?.language || "en",
      i = languages.find(e => e.keyword === n);
    var a = document.createElement("div");
    a.className = "select", a.onclick = () => s.classList.toggle("active");
    let o = document.createElement("img"),
      r = (o.src = i.src, o.alt = i.alt, a.appendChild(o), document.createElement("label"));
    r.className = "language", r.textContent = i18next.t(i.value), a.appendChild(r);
    var c = document.createElement("img");
    c.src = ASSET_URL + "/dropdown-btn.svg", a.appendChild(c), t.appendChild(a);
    let s = document.createElement("section");
    s.className = "dropdown-content", languages.forEach((t, e) => {
      var n = document.createElement("div"),
        e = (n.key = e, n.className = "dropdown-option " + (t.keyword === i.keyword ? "selected" : ""), n.onclick = () => {
          return e = t, i = e, i18next.changeLanguage(e.keyword).then(() => {
            o.src = e.src, r.textContent = i18next.t(e.value), languages.forEach(t => {
              var e = Array.from(s.children).find(e => e.textContent.trim() === i18next.t(t.value));
              e && (e.querySelector(".text").textContent = i18next.t(t.value));
            });
          }).catch(e => void 0), s.classList.remove("active"), void updatePersistData("schoolTheme", {
            language: e.keyword
          });
          var e;
        }, document.createElement("img")),
        e = (e.src = t.src, e.alt = t.alt, n.appendChild(e), document.createElement("div"));
      e.className = "text", e.textContent = i18next.t(t.value), n.appendChild(e), s.appendChild(n);
    }), t.appendChild(s), e.appendChild(t), modalContent.insertBefore(e, modalContent.firstChild);
  },
  setLanguage = e => {
    i18next.changeLanguage(e, e => {
      if (e) return void 0;
      updateTranslations();
    });
  };
function closeModal() {
  "function" == typeof window.globalCallback && localStorage.getItem("mereosToken") && window.globalCallback({
    message: "precheck_completed"
  }), window.sharedMediaStream && window.sharedMediaStream?.getTracks()?.forEach(e => e.stop()), cleanupZendeskWidget(), modal.style.display = "none", modal.remove();
}
let showTab = async (t, e) => {
    try {
      loadZendeskWidget(), updateThemeColor();
      var n = document.querySelectorAll(".tab"),
        i = document.querySelectorAll(".tab-content"),
        a = (n.forEach(e => {
          e.classList.remove("active"), e.dataset.tab === t && e.classList.add("active");
        }), i.forEach(e => {
          e.classList.remove("active"), e.id === t && e.classList.add("active");
        }), getSecureFeatures()),
        o = a?.entities || [];
      "ExamPreparation" === t ? o?.find(e => "record_video" === e.key) ? await ExamPreparation(ExamPreparationContainer) : navigate("runSystemDiagnostics") : "runSystemDiagnostics" === t ? o?.filter(e => systemDiagnosticSteps.includes(e.key))?.length ? runSystemDiagnostics(SystemDiagnosticsContainer) : navigate("Prevalidationinstruction") : "Prevalidationinstruction" === t ? o.filter(e => prevalidationSteps.includes(e.key))?.length ? await PrevalidationInstructions(PrevalidationinstructionContainer) : navigate("IdentityVerificationScreenOne") : "IdentityVerificationScreenOne" === t ? o?.find(e => "verify_candidate" === e.key) ? await IdentityVerificationScreenOne(IdentityVerificationScreenOneContainer, e) : navigate("IdentityVerificationScreenTwo", e) : "IdentityVerificationScreenTwo" === t ? o?.find(e => "verify_id" === e.key) ? await IdentityVerificationScreenTwo(IdentityVerificationScreenTwoConatiner) : navigate("IdentityVerificationScreenThree") : "IdentityVerificationScreenThree" === t ? o?.find(e => "record_audio" === e.key) ? await IdentityVerificationScreenThree(IdentityVerificationScreenThreeContainer) : navigate("IdentityVerificationScreenFour") : "IdentityVerificationScreenFour" === t ? o?.find(e => "record_room" === e.key) ? await IdentityVerificationScreenFour(IdentityVerificationScreenFourContainer) : navigate("IdentityVerificationScreenFive") : "MobileProctoring" === t ? o?.find(e => "mobile_proctoring" === e.key) ? await MobileProctoring(mobileProctingConatiner) : navigate("IdentityVerificationScreenFive") : "IdentityVerificationScreenFive" === t && o?.find(e => "record_screen" === e.key) ? await IdentityVerificationScreenFive(IdentityVerificationScreenFiveContainer, e) : closeModal(e);
    } catch (e) {
      void 0;
    }
  },
  startSession = async e => {
    var t = convertDataIntoParse("candidateAssessment");
    try {
      var n = await addSectionSessionRecord(e, t);
      n?.data && (updatePersistData("session", {
        sessionId: n?.data?.session_id,
        id: n?.data?.id
      }), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "session_initiated"
      })), updatePersistData("session", {
        id: n.data.id,
        sessionStatus: "Initiated"
      });
    } catch (e) {
      void 0;
    }
  },
  updateTranslations = () => {
    var e = handlePreChecksRedirection(window.globalCallback);
    showTab(e, window.globalCallback);
  };
function checkToken() {
  localStorage.getItem("mereosToken") || closeModal();
}
i18next.init({
  lng: schoolTheme?.language.split("-")[0] || "en",
  resources: {
    en: {
      translation: require("../assets/locales/en/translation.json")
    },
    fr: {
      translation: require("../assets/locales/fr/translation.json")
    },
    it: {
      translation: require("../assets/locales/it/translation.json")
    },
    pt: {
      translation: require("../assets/locales/pt/translation.json")
    },
    nl: {
      translation: require("../assets/locales/nl/translation.json")
    },
    es: {
      translation: require("../assets/locales/es/translation.json")
    },
    de: {
      translation: require("../assets/locales/de/translation.json")
    }
  }
}, e => {
  if (e) return void 0;
  updateTranslations();
}), document.addEventListener("DOMContentLoaded", () => {
  updateTranslations();
}), checkToken(), window.addEventListener("unload", cleanupZendeskWidget);
let checkInterval = 2e3;
setInterval(checkToken, checkInterval);
export { setLanguage, updateTranslations, openModal, closeModal, modalContent, showTab };
import "../assets/css/exam-prepration.css";
import { showTab } from "./examPrechecks";
import { registerEvent, updatePersistData } from "../utils/functions";
import i18next from "i18next";
import { ASSET_URL } from "../utils/constant";
let vectors = [{
    name: "img1",
    src: ASSET_URL + "/oc-address.svg",
    alt: ""
  }, {
    name: "img2",
    src: ASSET_URL + "/oc-lightbulb.svg",
    alt: ""
  }, {
    name: "img3",
    src: ASSET_URL + "/oc-megaphone.svg",
    alt: ""
  }, {
    name: "img4",
    src: ASSET_URL + "/stacked-up-books.svg",
    alt: ""
  }, {
    name: "img5",
    src: ASSET_URL + "/vector-2.png",
    alt: ""
  }, {
    name: "img6",
    src: ASSET_URL + "/vector-1.png",
    alt: ""
  }, {
    name: "img7",
    src: ASSET_URL + "/vector-3.png",
    alt: ""
  }, {
    name: "img8",
    src: ASSET_URL + "/vector-1.png",
    alt: ""
  }],
  getDateTime = () => new Date().toISOString(),
  ExamPreparation = async (r, i) => {
    if (r) {
      r.innerHTML = "";
      var o = document?.getElementById("mobile-proctoring"),
        o = (o && (o.innerHTML = ""), document.createElement("div")),
        s = (o.className = "exam-preparation", document.createElement("div")),
        m = (s.className = "exam-preparation-container", document.createElement("img"));
      m.className = "header-img", m.src = ASSET_URL + "/oc-reading-book.png", m.alt = "header-img", s.appendChild(m);
      let e = document.createElement("h1"),
        t = (e.textContent = i18next.t("exam_preparation"), s.appendChild(e), document.createElement("label")),
        n = (t.className = "ep-msg", t.textContent = i18next.t("icc_msg"), s.appendChild(t), document.createElement("button")),
        a = (n.className = "orange-filled-btn", n.textContent = i18next.t("continue"), n.style.marginTop = "10px", n.style.justifyContent = "center", n.addEventListener("click", () => {
          registerEvent({
            eventType: "success",
            notify: !1,
            eventName: "terms_and_conditions_read",
            eventValue: getDateTime()
          }), showTab("runSystemDiagnostics", i), updatePersistData("preChecksSteps", {
            examPreparation: !0
          });
        }), s.appendChild(n), o.appendChild(s), document.createElement("div"));
      a.className = "bg-images", vectors.forEach(e => {
        var t = document.createElement("img");
        t.className = e.name, t.src = e.src, t.alt = e.alt, a.appendChild(t);
      }), o.appendChild(a), r.appendChild(o);
      m = document.createElement("style");
      m.textContent = `
    .exam-preparation {
        /* Define your CSS styles here */
    }
    .exam-preparation-container {
        /* Define your CSS styles here */
    }
    /* Define other classes as needed */
  `, document.head.appendChild(m), i18next.on("languageChanged", () => {
        e.textContent = i18next.t("exam_preparation"), t.textContent = i18next.t("icc_msg"), n.textContent = i18next.t("continue");
      });
    } else void 0;
  };
i18next.on("languageChanged", () => {
  var e = document.querySelector(".tab-content.active");
  e && "ExamPreparation" === e.id && ExamPreparation(e);
});
export { ExamPreparation };
import { t } from "i18next";
import { getSecureFeatures } from "../utils/functions";
import "../assets/css/identityStep.css";
let UNVERIFIED = "UNVERIFIED",
  VERIFIED = "VERIFIED",
  VERIFING = "VERIFING",
  renderStep = (e, n) => {
    var i = document.createElement("div");
    i.className = "ivs-instruction-step-container";
    let r = "ivs-instruction-txt";
    e !== VERIFING && e !== VERIFIED || (r = "ivs-instruction-txt-orange");
    e = document.createElement("span");
    return e.className = r, e.textContent = t(n), i.appendChild(e), i;
  },
  renderIdentityVerificationSteps = (e, t) => {
    let n = getSecureFeatures()?.entities || [];
    var i,
      r,
      d = t => n.find(e => e.key === t),
      s = document.createElement("div"),
      a = (s.className = "steps-container", e => e === t ? VERIFING : e < t ? VERIFIED : UNVERIFIED);
    d("verify_candidate") && ((r = document.createElement("div")).className = "ivs-instruction", i = a(1), r.appendChild(renderStep(i, "take_a_photo", i === VERIFING)), s.appendChild(r)), d("verify_id") && ((i = document.createElement("div")).className = "ivs-instruction", r = a(2), i.appendChild(renderStep(r, "photo_id", r === VERIFING)), s.appendChild(i)), d("record_audio") && ((r = document.createElement("div")).className = "ivs-instruction", i = a(3), r.appendChild(renderStep(i, "sound_check", i === VERIFING)), s.appendChild(r)), d("record_room") && ((i = document.createElement("div")).className = "ivs-instruction", r = a(4), i.appendChild(renderStep(r, "360_video", r === VERIFING)), s.appendChild(i)), d("mobile_proctoring") && ((r = document.createElement("div")).className = "ivs-instruction", i = a(5), r.appendChild(renderStep(i, "synchronisation_mobile", i === VERIFING)), s.appendChild(r)), d("record_screen") && ((i = document.createElement("div")).className = "ivs-instruction", r = a(6), i.appendChild(renderStep(r, "screen_record", r === VERIFING)), s.appendChild(i)), e.appendChild(s);
  };
export { renderIdentityVerificationSteps };
import { detectMultipleScreens, getDateTime, getSecureFeatures, registerEvent, shareScreenFromContent, updatePersistData } from "../utils/functions";
import "../assets/css/step5.css";
import { showTab } from "./examPrechecks";
import i18next from "i18next";
import { renderIdentityVerificationSteps } from "./IdentitySteps";
import socket from "../utils/socket";
import { ASSET_URL } from "../utils/constant";
let newStream,
  IdentityVerificationScreenFive = async e => {
    let t;
    if (!e) return void void 0;
    let n = null,
      r = "startScreenRecording",
      s = {
        type: "successful",
        text: i18next.t("please_share_entire_screen")
      };
    var i = async () => {
        try {
          if (newStream = await shareScreenFromContent(), updatePersistData("session", {
            screenRecordingStream: location
          }), "monitor" !== newStream.getVideoTracks()[0].getSettings().displaySurface) throw newStream.getVideoTracks()[0].stop(), i18next.t("please_share_entire_screen");
          n = newStream, r = "startScreenRecording", s = {
            type: "successful",
            text: i18next.t("screen_shared_successfully")
          };
        } catch (e) {
          void 0, r = "rerecordScreen", s = {
            type: "unsuccessful",
            text: e
          };
        }
        g();
      },
      a = document.createElement("div"),
      o = (a.classList.add("screen-share-container"), document.createElement("div")),
      c = (renderIdentityVerificationSteps(o, 6), document.createElement("div"));
    c.classList.add("screen-wrapper");
    let d = document.createElement("div"),
      l = (d.classList.add("ivsf-header-titles"), d.textContent = i18next.t("verification_completed"), document.createElement("div")),
      m = (l.classList.add("screen-desc"), l.textContent = i18next.t("verification_completed_msg"), c.appendChild(d), c.appendChild(l), c.appendChild(o), document.createElement("button"));
    o = document.createElement("img");
    o.classList.add("screen-share-dummy"), o.src = ASSET_URL + "/screen-recorder-mock.svg", o.alt = "camera-icon", c.appendChild(o);
    let p = document.createElement("div");
    p.classList.add("ivsf-query-msg"), s.text && (p.textContent = i18next.t(s.text), "unsuccessful" === s.type && (p.style.color = "#E95E5E"), c.appendChild(p));
    o = document.createElement("div");
    o.classList.add("ivsf-btn-container");
    let u = document.createElement("button");
    u.className = "orange-hollow-btn", u.textContent = i18next.t("previous_step"), u.addEventListener("click", () => {
      n && n.getVideoTracks()[0].stop(), updatePersistData("preChecksSteps", {
        screenSharing: !1
      }), showTab("IdentityVerificationScreenFour");
    }), o.appendChild(u);
    let S;
    "startScreenRecording" === r ? ((S = document.createElement("button")).className = "orange-filled-btn", S.textContent = i18next.t("done"), S.disabled = t, S.addEventListener("click", () => {
      updatePersistData("preChecksSteps", {
        screenSharing: !0
      }), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "screen_recording_window_shared",
        eventValue: getDateTime()
      }), showTab("IdentityVerificationScreenSix");
    }), o.appendChild(S)) : "rerecordScreen" === r && (m.className = "orange-filled-btn", m.textContent = i18next.t("reshare_screen"), m.addEventListener("click", i), o.appendChild(m)), c.appendChild(o), a.appendChild(c);
    o = document.createElement("style"), o.textContent = `
        .screen-share-container {
            /* Define your CSS styles here */
        }
        .screen-wrapper {
            /* Define your CSS styles here */
        }
        /* Define other classes as needed */
    `, a.appendChild(o), e.innerHTML = "", e.appendChild(a), i(), socket ? (socket.onmessage = e => {
      e = JSON.parse(e?.data);
      "violation" === (e?.message?.event || e?.event) && ("Violation" === e?.message?.message && (updatePersistData("preChecksSteps", {
        mobileConnection: !1,
        screenSharing: !1
      }), newStream && newStream?.getVideoTracks()[0].stop(), showTab("MobileProctoring")), registerEvent({
        eventType: "error",
        notify: !1,
        eventName: e?.message?.message,
        eventValue: getDateTime()
      }));
    }, socket.onerror = e => {
      void 0;
    }, socket.onclose = () => {
      void 0;
    }) : void 0, c = getSecureFeatures();
    (c?.entities || []).find(e => "Verify Desktop" === e.name) && (async () => {
      detectMultipleScreens() ? t = !0 : (t = !1, registerEvent({
        eventType: "error",
        notify: !1,
        eventName: "multiple_screens_detected"
      }));
    })();
    let g = () => {
      d.textContent = i18next.t("verification_completed"), l.textContent = i18next.t("verification_completed_msg"), p.textContent = i18next.t(s.text), u.textContent = i18next.t("previous_step"), "startScreenRecording" === r ? S.textContent = i18next.t("done") : "rerecordScreen" === r && (m.textContent = i18next.t("reshare_screen"));
    };
    return i18next.on("languageChanged", g), a;
  };
export { newStream, IdentityVerificationScreenFive };
import "../assets/css/step4.css";
import { showTab } from "./examPrechecks";
import { getDateTime, registerEvent, updatePersistData, uploadFileInS3Folder } from "../utils/functions";
import i18next from "i18next";
import { renderIdentityVerificationSteps } from "./IdentitySteps";
import { ASSET_URL } from "../utils/constant";
window.userMediaStream = null;
let IdentityVerificationScreenFour = async s => {
  if (s.querySelector(".screen-four-container")) return;
  let l = "startRecording",
    p = !1,
    m = "scan_your_room",
    u = !1,
    g = null,
    t = null,
    a = [],
    h = {
      width: 640,
      height: 480,
      facingMode: "user",
      video: !localStorage.getItem("deviceId") || {
        deviceId: {
          exact: localStorage.getItem("deviceId")
        }
      }
    },
    v = async e => {
      try {
        "startRecording" === e && ((t = new MediaRecorder(window.userMediaStream, {
          mimeType: "video/webm; codecs=vp9"
        })).ondataavailable = e => {
          0 < e.data.size && a.push(e.data);
        }, t.onstop = () => {
          g = new Blob(a, {
            type: "video/webm"
          }), p = !0, a = [], n();
        }, t.start(), l = "beingRecorded", n());
      } catch (e) {
        void 0;
      }
    },
    f = async () => {
      p = !1, u = !1, l = "startRecording", n();
    },
    w = async () => {
      t && t.stop(), l = "stopRecording", n();
    },
    _ = async () => {
      try {
        p = !1, u = !1, window.userMediaStream && (window.userMediaStream.getTracks().forEach(e => e.stop()), window.userMediaStream = null), updatePersistData("preChecksSteps", {
          roomScanningVideo: !0
        }), registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "room_scan_completed",
          eventValue: getDateTime()
        }), showTab("MobileProctoring");
      } catch (e) {
        void 0;
      }
    },
    y = () => {
      updatePersistData("preChecksSteps", {
        roomScanningVideo: !1
      }), showTab("IdentityVerificationScreenThree");
    },
    S = async () => {
      try {
        u = !0, m = "file_is_being_uploaded", n();
        var e,
          t = await uploadFileInS3Folder({
            file: g,
            folderName: "videos"
          });
        t?.data?.file_url && (e = t.data.file_url, updatePersistData("session", {
          room_scan_video: e
        }), l = "uploaded_file", m = "candidate_video_is_uploaded_successfully", n());
      } catch (e) {
        u = !1, m = "something_went_wrong_please_upload_again", l = "stopRecording", n();
      }
    },
    n = async () => {
      let e = s?.querySelector(".screen-four-container");
      e || ((e = document.createElement("div")).className = "screen-four-container", e.id = "screen-four-main-container", s.appendChild(e)), e.innerHTML = "";
      var t,
        a = document.createElement("div"),
        n = (renderIdentityVerificationSteps(a, 4), document.createElement("div")),
        i = (n.className = "ivsf-wrapper", document.createElement("div")),
        d = (i.className = "ivsf-header-title", i.textContent = i18next.t("workspace_checking"), document.createElement("div")),
        o = (d.className = "ivsf-msg", d.textContent = i18next.t("workspace_checking_msg"), document.createElement("div")),
        r = (o.className = "ivsf-header-img-container", p && g ? ((c = document.createElement("video")).id = "myVideo", c.className = "my-recorded-video2", c.controls = !0, c.autoplay = !0, c.src = URL.createObjectURL(g), o.appendChild(c)) : "beingRecorded" === l && ((c = document.createElement("div")).className = "ivsf-recording-badge-container", (r = document.createElement("img")).className = "ivsf-recording-dot", r.src = ASSET_URL + "/red-dot.svg", r.alt = "red-dot", (t = document.createElement("video")).autoplay = !0, t.muted = !0, t.height = 250, t.id = "webcam-recorded-media", t.srcObject = window.userMediaStream, c.appendChild(r), c.appendChild(document.createTextNode("" + i18next.t("recording"))), o.appendChild(c), o.appendChild(t)), n.appendChild(i), n.appendChild(d), n.appendChild(a), n.appendChild(o), document.createElement("div")),
        c = (r.className = "ivsf-query-msg", r.textContent = i18next.t(m), "something_went_wrong_please_upload_again" === m && (r.style.color = "#E95E5E"), n.appendChild(r), document.createElement("div"));
      c.className = "ivsf-btn-container", "startRecording" === l ? (t = {
        audio: null === localStorage.getItem("microphoneID") || {
          deviceId: {
            exact: localStorage.getItem("microphoneID")
          }
        },
        video: h.video
      }, window.userMediaStream = await navigator.mediaDevices.getUserMedia(t), (i = document.createElement("video")).autoplay = !0, i.muted = !0, i.height = 250, i.id = "webcam-recording-media", i.srcObject = window.userMediaStream, o.appendChild(i), d = b("" + i18next.t("previous_step"), "orange-hollow-btn", y), a = b("" + i18next.t("record_video"), "orange-filled-btn", () => v("startRecording")), c.appendChild(d), c.appendChild(a)) : "beingRecorded" === l ? (r = b("" + i18next.t("previous_step"), "orange-hollow-btn", y), t = b("" + i18next.t("stop_recording"), "orange-filled-btn", w), c.appendChild(r), c.appendChild(t)) : "stopRecording" !== l && "uploaded_file" !== l || (o = b("Reset", "orange-hollow-btn", f), c.appendChild(o), "uploaded_file" !== l ? ((i = b("" + i18next.t("Upload"), "orange-filled-btn", S)).disabled = u, c.appendChild(i)) : (d = b("" + i18next.t("next_step"), "orange-filled-btn", _), c.appendChild(d))), n.appendChild(c), e.appendChild(n);
    },
    b = (e, t, a) => {
      var n = document.createElement("button");
      return n.textContent = e, n.className = t, n.addEventListener("click", a), n;
    };
  v(), n(), i18next.on("languageChanged", () => {
    n();
  });
};
export { IdentityVerificationScreenFour };
import { dataURIToBlob, registerEvent, updatePersistData, uploadFileInS3Folder, userRekognitionInfo } from "../utils/functions";
import "../assets/css/step1.css";
import { showTab } from "./examPrechecks";
import i18next from "i18next";
import { renderIdentityVerificationSteps } from "./IdentitySteps";
import { ASSET_URL } from "../utils/constant";
let IdentityVerificationScreenOne = async m => {
  let p = {
      isUploading: !1,
      captureMode: "take",
      imageSrc: null,
      videoConstraints: {
        video: !localStorage.getItem("deviceId") || {
          deviceId: {
            exact: localStorage.getItem("deviceId")
          }
        },
        width: 350,
        height: 280,
        facingMode: "user"
      },
      msg: {
        type: "checking",
        text: "center_your_face"
      }
    },
    u = null,
    g = null,
    v = async () => {
      try {
        var e;
        (g = document.createElement("video")).width = p.videoConstraints.width, g.height = p.videoConstraints.height, g.autoplay = !0, u = await navigator.mediaDevices.getUserMedia(p.videoConstraints), g.srcObject = u, m && (e = m.querySelector(".ivso-webcam-container")) && (e.innerHTML = "", e.appendChild(g));
      } catch (e) {
        void 0;
      }
    },
    h = async () => {
      var e = document.createElement("canvas");
      e.width = g.videoWidth, e.height = g.videoHeight;
      e.getContext("2d").drawImage(g, 0, 0, e.width, e.height);
      e = e.toDataURL("image/jpeg");
      p = {
        ...p,
        captureMode: "retake",
        imageSrc: e,
        msg: {
          type: "checking",
          text: "please_wait_we_processing"
        }
      }, y(), t();
    },
    i = async (e, t = "screenshot.png") => {
      e = await (await fetch(e)).blob();
      return new File([e], t, {
        type: e.type
      });
    },
    t = async () => {
      if (p.imageSrc) {
        var t = new Image(),
          a = new FormData(),
          n = await i(p.imageSrc),
          n = (a.append("image", n), await userRekognitionInfo(a));
        let e = n?.data?.face?.FaceDetails;
        t.onload = async function () {
          e?.length && 1 === e?.length ? (p = {
            ...p,
            imageSrc: p.imageSrc,
            msg: {
              type: "successful",
              text: "detected_face_successfully"
            }
          }, registerEvent({
            eventType: "success",
            notify: !1,
            eventName: "detected_face_successfully"
          })) : 1 < e?.length ? (p = {
            ...p,
            imageSrc: null,
            captureMode: "take",
            msg: {
              type: "unsuccessful",
              text: "multiple_face_detected"
            }
          }, v(), registerEvent({
            eventType: "success",
            notify: !1,
            eventName: "multiple_face_detected"
          })) : (p = {
            ...p,
            imageSrc: null,
            captureMode: "take",
            msg: {
              type: "unsuccessful",
              text: "face_not_detected"
            }
          }, v(), registerEvent({
            eventType: "success",
            notify: !1,
            eventName: "face_not_detected"
          })), y();
        }, t.src = p.imageSrc;
      }
    },
    _ = () => {
      u && u?.getTracks()?.forEach(e => e.stop()), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "candidate_photo_captured_successfully"
      }), updatePersistData("preChecksSteps", {
        userPhoto: !0
      }), showTab("IdentityVerificationScreenTwo");
    },
    f = async () => {
      try {
        p.isUploading = !0, y(), p = {
          ...p,
          msg: {
            type: "loading",
            text: "file_is_being_uploaded"
          }
        };
        var e = await uploadFileInS3Folder({
          folderName: "candidate_images",
          file: dataURIToBlob(p.imageSrc)
        });
        e?.data?.file_url && (updatePersistData("session", {
          candidatePhoto: e.data.file_url
        }), p = {
          ...p,
          captureMode: "uploaded_photo",
          msg: {
            type: "waiting",
            text: "candidate_photo_uploaded_successfully"
          }
        }, registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "candidate_photo_uploaded_successfully"
        }));
      } catch (e) {
        p = {
          ...p,
          captureMode: "take",
          imageSrc: null,
          msg: {
            type: "checking",
            text: "something_went_wrong_please_upload_again"
          }
        }, registerEvent({
          eventType: "error",
          notify: !1,
          eventName: "internet_connection_unstable"
        });
      } finally {
        p.isUploading = !0;
      }
      y();
    },
    y = () => {
      let e = m.querySelector(".ivso-container");
      e ? e.innerHTML = "" : ((e = document.createElement("div")).className = "ivso-container", m.appendChild(e));
      var t,
        a = document.createElement("div"),
        n = (a.className = "ivso-wrapper", document.createElement("div")),
        i = (n.className = "ivso-header-title", n.textContent = i18next.t("webcam_diagnostics"), document.createElement("div")),
        c = (i.className = "first-header-msg", i.textContent = i18next.t("your_face_must_visible_on_screen"), document.createElement("div")),
        s = (renderIdentityVerificationSteps(c, 1), document.createElement("div")),
        o = (s.className = "ivso-msg", s.textContent = i18next.t(p.msg.text), document.createElement("div")),
        d = (o.className = "ivso-webcam-container", document.createElement("div")),
        r = (d.className = "ivso-header-img-container", document.createElement("div")),
        l = (r.className = "ivso-btn-container", document.createElement("div"));
      l.className = "ivso-query-msg", p.imageSrc ? ((t = document.createElement("img")).src = p.imageSrc, t.className = "ivso-captured-img", d.appendChild(t)) : (u || v(), o.appendChild(g), (t = document.createElement("img")).src = ASSET_URL + "/screen-centered-grid.svg", t.className = "ivso-screen-grid", d.appendChild(t)), "take" !== p.captureMode && ((t = document.createElement("button")).textContent = i18next.t("retake_photo"), t.className = "orange-hollow-btn", t.addEventListener("click", () => {
        p = {
          ...p,
          imageSrc: null,
          captureMode: "take",
          videoConstraints: {
            ...p.videoConstraints,
            deviceId: localStorage.getItem("deviceId") || void 0
          },
          msg: {
            type: "checking",
            text: "center_your_face"
          }
        }, y(), v();
      }), r.appendChild(t)), "uploaded_photo" === p.captureMode && ((t = document.createElement("button")).textContent = i18next.t("next_step"), t.className = "orange-filled-btn", t.addEventListener("click", _), r.appendChild(t)), "take" === p.captureMode && ((t = document.createElement("button")).textContent = i18next.t("take_photo"), t.className = "orange-filled-btn", t.addEventListener("click", h), r.appendChild(t)), "retake" === p.captureMode && ((t = document.createElement("button")).textContent = i18next.t("upload"), t.className = "orange-filled-btn", t.disabled = p.isUploading, t.addEventListener("click", f), r.appendChild(t)), a.appendChild(n), a.appendChild(i), a.appendChild(c), a.appendChild(d), a.appendChild(o), a.appendChild(s), a.appendChild(r), "retake" === p.captureMode && a.appendChild(l), e.appendChild(a);
    };
  y(), i18next.on("languageChanged", () => {
    p.msg.text = i18next.t(p.msg.text), y();
  });
};
export { IdentityVerificationScreenOne };
import { getDateTime, getSecureFeatures, registerEvent, updatePersistData } from "../utils/functions";
import { showTab } from "./examPrechecks";
import "../assets/css/step3.css";
import i18next from "i18next";
import { renderIdentityVerificationSteps } from "./IdentitySteps";
let IdentityVerificationScreenThree = async c => {
  let s,
    t = null,
    n,
    l,
    d = !1,
    u = {
      type: "",
      text: "be_loud_clear"
    },
    p = JSON.parse(localStorage.getItem("schoolTheme")),
    m = null,
    e = async () => {
      try {
        var e = await navigator.permissions.query({
          name: "microphone"
        });
        if ("granted" !== e.state) throw e.state;
        {
          t = await navigator.mediaDevices.getUserMedia({
            audio: !0,
            video: !1
          }), n = new AudioContext(), (l = n.createAnalyser()).fftSize = 2048, n.createMediaStreamSource(t).connect(l);
          let o = s,
            c = o?.getContext("2d"),
            e = () => {
              var t,
                n = l.frequencyBinCount,
                i = new Uint8Array(n),
                a = (l.getByteFrequencyData(i), c?.clearRect(0, 0, o.width, o.height), c.fillStyle = p?.theming || "#FF961B", o.width / n * 8.5);
              let r = 0;
              for (let e = 0; e < n; e++) t = i[e] / 2, c.fillRect(r, o.height - t, a, t), r += 1 + a;
              m = requestAnimationFrame(e);
            };
          e();
        }
      } catch (e) {
        void 0;
      }
    },
    h = () => {
      m || e(), u.type = "", u.text = "recording", d = !0, g();
      let r = 0,
        o = setInterval(() => {
          try {
            r += 1;
            var e = getSecureFeatures()?.settings || [],
              n = l.frequencyBinCount,
              i = new Uint8Array(n);
            l.getByteFrequencyData(i);
            let t = 0;
            for (let e = 0; e < n; e++) t += (i[e] / 255) ** 2;
            var a = Math.sqrt(t / n);
            if ((e?.audio_level || .15) < a) clearInterval(o), d = !1, u.type = "successful", u.text = "audio_test_passed", g();else if (15 <= r) throw "error";
          } catch (e) {
            clearInterval(o), d = !1, u.type = "unsuccessful", u.text = "audio_test_failed", g();
          }
        }, 1e3);
    },
    v = async () => {
      t && t.getAudioTracks().forEach(e => e.stop()), updatePersistData("preChecksSteps", {
        audioDetection: !0
      }), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "audio_check_completed",
        eventValue: getDateTime()
      }), showTab("IdentityVerificationScreenFour");
    },
    y = () => {
      updatePersistData("preChecksSteps", {
        audioDetection: !1
      }), showTab("IdentityVerificationScreenTwo");
    },
    g = () => {
      let n = c.querySelector(".ivst-container");
      n || ((n = document.createElement("div")).className = "ivst-container", c.appendChild(n));
      var i = document.createElement("div");
      renderIdentityVerificationSteps(i, 3);
      let a = n.querySelector(".ivst-wrapper");
      if (!a) {
        (a = document.createElement("div")).className = "ivst-wrapper";
        let e = document.createElement("div");
        e.className = "ivst-header-title", a.appendChild(e), a.appendChild(i);
        i = document.createElement("div");
        i.className = "ivst-msg";
        let t = document.createElement("div");
        t.className = "ivst-audio-text", t.style.textAlign = "center", a.appendChild(t), (s = document.createElement("canvas")).width = 800, s.height = 200, a.appendChild(s), a.appendChild(i), n.appendChild(a);
      }
      let e = a.querySelector(".ivst-header-title"),
        t = (e && (e.textContent = i18next.t("audio_check")), a.querySelector(".ivst-audio-text"));
      t && (t.textContent = i18next.t("no_point_in_running_leave_in_time"));
      var r,
        i = a.querySelector(".ivst-msg");
      i && (i.textContent = i18next.t(u.text), "unsuccessful" === u.type ? i.style.color = "#E95E5E" : i.style.color = "");
      let o = a.querySelector(".ivst-btn-container");
      o ? o.innerHTML = "" : ((o = document.createElement("div")).className = "ivst-btn-container", a.appendChild(o)), "" === u.type ? ((i = f("" + i18next.t("previous_step"), "orange-hollow-btn", y)).disabled = d, (r = f("" + i18next.t("record_audio"), "orange-filled-btn", h)).disabled = d, o.appendChild(i), o.appendChild(r)) : "unsuccessful" === u.type ? (i = f("" + i18next.t("previous_step"), "orange-hollow-btn", y), r = f("" + i18next.t("re_record_audio"), "orange-filled-btn", h), o.appendChild(i), o.appendChild(r)) : (i = f("" + i18next.t("re_record_audio"), "orange-hollow-btn", h), r = f("" + i18next.t("done"), "orange-filled-btn", v), o.appendChild(i), o.appendChild(r));
    },
    f = (e, t, n) => {
      var i = document.createElement("button");
      return i.textContent = e, i.className = t, i.addEventListener("click", n), i;
    };
  e(), g(), i18next.on("languageChanged", () => {
    u.text = i18next.t(u.text), g();
  });
  return {
    cleanup: () => {
      n && n.close(), cancelAnimationFrame(m), m = null, t && t.getTracks().forEach(e => {
        e.stop();
      });
    }
  };
};
export { IdentityVerificationScreenThree };
import { acceptableLabels, acceptableText, dataURIToBlob, getDateTime, registerEvent, srcToData, updatePersistData, uploadFileInS3Folder, userRekognitionInfo } from "../utils/functions";
import "../assets/css/step2.css";
import { showTab } from "./examPrechecks";
import i18next from "i18next";
import { renderIdentityVerificationSteps } from "./IdentitySteps";
import { ASSET_URL } from "../utils/constant";
let IdentityVerificationScreenTwo = async d => {
  let c,
    l,
    o = null,
    p = !1,
    a,
    m = {
      captureMode: "take",
      imageSrc: null,
      msg: {
        text: ""
      }
    },
    g = {
      width: 350,
      height: 280,
      facingMode: "user",
      deviceId: localStorage.getItem("deviceId") || void 0
    },
    u = () => {
      var e = document.createElement("canvas");
      e.width = g.width, e.height = g.height, e.getContext("2d").drawImage(c, 0, 0, e.width, e.height);
      let t = e.toDataURL("image/png");
      i(t).then(e => {
        a = e, (t ? (m = {
          ...m,
          imageSrc: t,
          msg: {
            type: "checking",
            text: "id_being_verified"
          }
        }, r(), n) : (m = {
          ...m,
          captureMode: "retake",
          msg: {
            type: "unsuccessful",
            text: "error_capturing_picture"
          }
        }, r))();
      });
    },
    i = async (e, t = "screenshot.png") => {
      e = await (await fetch(e)).blob();
      return new File([e], t, {
        type: e.type
      });
    },
    h = () => {
      m = {
        ...m,
        captureMode: "take",
        imageSrc: null,
        msg: {
          text: ""
        }
      }, r();
    },
    _ = async e => {
      0 < e.target.files.length && (a = e.target.files[0], e = URL.createObjectURL(e.target.files[0]), ((e = await srcToData(e)) ? (m = {
        ...m,
        imageSrc: e,
        msg: {
          type: "checking",
          text: "id_being_verified"
        }
      }, r(), n) : (m = {
        ...m,
        captureMode: "retake",
        msg: {
          type: "unsuccessful",
          text: "error_with_uploading_file"
        }
      }, r))());
    },
    n = async () => {
      if (m.imageSrc) {
        p = !0;
        var e = new FormData();
        e.append("image", a);
        try {
          var t = (await userRekognitionInfo(e)).data;
          t && (acceptableLabels(t?.label, 80) && acceptableText(t?.text, 59) && 0 < t?.face?.FaceDetails.length ? (m = {
            ...m,
            captureMode: "retake",
            msg: {
              type: "successful",
              text: "id_successfully_verified"
            }
          }, p = !1, registerEvent({
            eventType: "success",
            notify: !1,
            eventName: "id_successfully_verified"
          })) : (m = {
            ...m,
            captureMode: "retake",
            msg: {
              type: "unsuccessful",
              text: "id_not_verified"
            }
          }, p = !1, registerEvent({
            eventType: "success",
            notify: !1,
            eventName: "id_not_verified"
          })));
        } catch (e) {
          void 0;
        }
        r();
      }
    },
    v = async () => {
      o?.getTracks() && o.getTracks().forEach(e => e.stop()), updatePersistData("preChecksSteps", {
        identityCardPhoto: !0
      }), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "identity_card_verified_successfully",
        eventValue: getDateTime()
      }), showTab("IdentityVerificationScreenThree");
    },
    y = async () => {
      try {
        m = {
          ...m,
          msg: {
            type: "loading",
            text: "file_is_being_uploaded"
          }
        }, r();
        var e = await uploadFileInS3Folder({
          folderName: "candidate_ids/",
          file: dataURIToBlob(m.imageSrc)
        });
        if (!e?.data?.file_url) throw "something_went_wrong_please_upload_again";
        updatePersistData("session", {
          identityCard: e.data.file_url
        }), m = {
          ...m,
          captureMode: "uploaded_photo",
          msg: {
            type: "waiting",
            text: "candidate_id_is_uploaded_successfully"
          }
        }, registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "identity_card_uploaded_successfully"
        });
      } catch (e) {
        m = {
          ...m,
          captureMode: "take",
          imageSrc: null,
          msg: {
            type: "error",
            text: "something_went_wrong_please_upload_again"
          }
        }, registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "internet_connection_unstable"
        });
      }
      r();
    },
    f = () => {
      updatePersistData("preChecksSteps", {
        identityCardPhoto: !1
      }), showTab("IdentityVerificationScreenOne");
    },
    r = async () => {
      let e = d.querySelector(".ivso-container");
      e || ((e = document.createElement("div")).className = "ivso-container", d.appendChild(e)), e.innerHTML = "";
      var t,
        a = document.createElement("div"),
        i = (renderIdentityVerificationSteps(a, 2), document.createElement("div")),
        n = (i.className = "ivst-wrapper", document.createElement("div")),
        r = (n.className = "ivst-header-title", n.textContent = i18next.t("identity_validation"), document.createElement("div")),
        s = (r.className = "ivst-msg", r.textContent = i18next.t("initial_system_check_passed_get_ready_for_identity_validation"), document.createElement("div")),
        r = (s.className = "ivst-header-img-container", m.imageSrc ? ((t = document.createElement("img")).src = m.imageSrc, t.className = "ivst-header-img", t.alt = "captured-image", s.appendChild(t), (t = document.createElement("img")).src = ASSET_URL + "/checkmark-green.svg", t.className = "ivst-header-img-result", t.alt = "tick-mark-green-bg", s.appendChild(t)) : ((c = document.createElement("video")).width = g.width, c.height = g.height, c.autoplay = !0, s.appendChild(c), null !== (o = await navigator.mediaDevices.getUserMedia({
          video: g,
          audio: !1
        })) && (c.srcObject = o), (t = document.createElement("img")).src = ASSET_URL + "/screen-centered-grid.svg", t.className = "ivst-screen-grid", t.alt = "screen-centered-grid", s.appendChild(t)), i.appendChild(n), i.appendChild(r), i.appendChild(a), i.appendChild(s), m.msg.text && ((t = document.createElement("div")).className = "ivst-query-msg", t.textContent = i18next.t(m.msg.text), "unsuccessful" === m.msg.type && (t.style.color = "#E95E5E"), i.appendChild(t)), m.imageSrc || ((n = document.createElement("div")).className = "ivst-query-msg", n.innerHTML = `${i18next.t("please_take_picture_or")} <span class="ivst-file">${i18next.t("upload_your_identity_document")}</span>.`, n.querySelector(".ivst-file").addEventListener("click", () => l.click()), i.appendChild(n)), document.createElement("div"));
      r.className = "ivst-btn-container", "take" === m.captureMode ? (a = x("" + i18next.t("previous_step"), "orange-hollow-btn", f), (s = x("" + i18next.t("take_id_photo"), "orange-filled-btn", u)).disabled = p || !!m.imageSrc, r.appendChild(a), r.appendChild(s)) : (t = x("" + i18next.t("retake_id_photo"), "orange-filled-btn", h), r.appendChild(t), "uploaded_photo" !== m.captureMode ? ((n = x("" + i18next.t("upload"), "orange-filled-btn", y)).disabled = "loading" === m.msg.type, r.appendChild(n)) : (a = x("" + i18next.t("next_step"), "orange-filled-btn", v), r.appendChild(a))), i.appendChild(r), e.appendChild(i), (l = document.createElement("input")).type = "file", l.name = "idCard", l.accept = "image/*", l.hidden = !0, l.addEventListener("change", _), e.appendChild(l);
    },
    x = (e, t, a) => {
      var i = document.createElement("button");
      return i.className = t, i.textContent = e, i.addEventListener("click", a), i;
    };
  r(), i18next.on("languageChanged", () => {
    m.msg.text = i18next.t(m.msg.text), r();
  });
};
export { IdentityVerificationScreenTwo };
import i18next from "i18next";
let LanguageDropdown = e => {
    var t = document.createElement("div"),
      n = (t.className = "dropdown", document.createElement("div"));
    n.className = "select";
    let a = document.createElement("div"),
      o = (a.textContent = "Select Language", n.appendChild(a), document.createElement("div"));
    return o.className = "dropdown-content", e.forEach(e => {
      var t = document.createElement("div");
      t.className = "option", t.textContent = e.name, t.addEventListener("click", () => {
        a.textContent = e.name, o.classList.remove("active"), setLanguage(e.keyword);
      }), o.appendChild(t);
    }), n.addEventListener("click", () => {
      o.classList.toggle("active");
    }), t.appendChild(n), t.appendChild(o), t;
  },
  setLanguage = e => {
    i18next.changeLanguage(e, e => {
      if (e) return void 0;
      updateTranslations();
    });
  },
  updateTranslations = () => {
    document.querySelectorAll("[data-i18n]").forEach(e => {
      var t = e.getAttribute("data-i18n");
      e.textContent = i18next.t(t);
    });
  };
export { LanguageDropdown, setLanguage, updateTranslations };
import Peer from "peerjs";
import socket from "../utils/socket";
import "../assets/css/mobile-proctoring.css";
import { renderIdentityVerificationSteps } from "./IdentitySteps";
import i18next, { t } from "i18next";
import QRCode from "qrcode";
import { getAuthenticationToken, getDateTime, registerEvent, showToast, updatePersistData } from "../utils/functions";
import { showTab } from "./examPrechecks";
import { v4 } from "uuid";
import { ASSET_URL } from "../utils/constant";
window.mobileStream = null;
let MobileProctoring = async n => {
  let d = "",
    m = !1,
    p = !1,
    o = document.createElement("video"),
    a = document.createElement("video"),
    r = null,
    u = JSON.parse(localStorage.getItem("socketGroupId")),
    b = e => {
      d = e, i(), "step4" === e && (window.mobileStream?.getTracks()?.forEach(e => e.stop()), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "mobile_connection_successfull",
        eventValue: getDateTime()
      }), updatePersistData("preChecksSteps", {
        mobileConnection: !0
      }), showTab("IdentityVerificationScreenFive"), (e = document.getElementById("mobile-proctoring")) && (e.innerHTML = ""), o) && (o.srcObject = null);
    },
    g = () => {
      d = "tokenCode", p = !1, window.mobileStream && window.mobileStream?.getTracks()?.forEach(e => e.stop()), socket.readyState === WebSocket.OPEN && socket?.send(JSON.stringify({
        event: "resetSession"
      })), i();
    };
  function i() {
    let e = n?.querySelector(".ivsf-container");
    e || ((e = document.createElement("div")).className = "ivsf-container", n.appendChild(e), e.id = "mobile-proctoring"), e.innerHTML = "";
    var o = document.createElement("div"),
      a = (o.className = "ivsf-wrapper", document.createElement("div")),
      r = (a.className = "mobile-header-title", a.innerText = t("setting_up_your_phone_camera"), document.createElement("div"));
    if (renderIdentityVerificationSteps(r, 5), o.appendChild(a), o.appendChild(r), "" === d) {
      var a = document.createElement("div"),
        r = (a.className = "mobile-connection-banner", document.createElement("img")),
        r = (r.className = "banner-image", r.src = ASSET_URL + "/mobile-connection-banner.png", a.appendChild(r), document.createElement("div")),
        i = (r.className = "banner-info-box", document.createElement("div")),
        c = (i.className = "title", i.innerHTML = `<img src="${ASSET_URL}/info-blue.svg" /> <p>${t("during_your_assessment")}</p>`, document.createElement("p")),
        i = (c.className = "desc", c.innerHTML = t("notifications_on_your_phone_should_be_turned_off") + "<br />" + t("do_not_lock_your_phone"), r.appendChild(i), r.appendChild(c), a.appendChild(r), o.appendChild(a), document.createElement("div")),
        c = (i.className = "bottom-desc", i.innerText = t("in_order_to_carry_out_your_assessment"), o.appendChild(i), document.createElement("div")),
        r = (c.className = "ivsf-btn-container", document.createElement("button")),
        a = (r.className = "orange-hollow-btn", r.innerText = t("i_already_have_the_app"), r.onclick = g, document.createElement("button"));
      a.className = "orange-filled-btn", a.innerText = t("download_the_app"), a.onclick = () => b("downloadApp"), c.appendChild(r), c.appendChild(a), o.appendChild(c);
    } else if ("downloadApp" === d) {
      i = document.createElement("div"), r = (i.className = "qr-code-container", document.createElement("canvas")), a = (i.appendChild(r), QRCode.toCanvas(r, "https://mobile.mereos.eu/", function (e) {
        e && void 0;
      }), document.createElement("p")), c = (a.className = "bottom-desc", a.innerText = t("please_scan_this_qr_code"), document.createElement("div")), r = (c.className = "ivsf-btn-container", document.createElement("button"));
      r.className = "orange-filled-btn", r.innerText = t("i_downloaded_the_app"), r.onclick = () => b("tokenCode"), c.appendChild(r), i.appendChild(a), i.appendChild(c), o.appendChild(i);
    } else if ("tokenCode" === d) {
      r = document.createElement("div"), a = (r.className = "qr-code-container", document.createElement("canvas")), c = (r.appendChild(a), QRCode.toCanvas(a, JSON.stringify({
        token: getAuthenticationToken(),
        groupName: u?.groupName
      }), function (e) {
        e && void 0;
      }), document.createElement("p")), i = (c.className = "bottom-desc", c.innerText = t("open_the_mereos_mobile_application"), document.createElement("div")), a = (i.className = "ivsf-btn-container", document.createElement("button"));
      a.className = "orange-filled-btn", a.innerText = t("i_dont_have_the_app"), a.onclick = () => b("downloadApp"), i.appendChild(a), r.appendChild(c), r.appendChild(i), o.appendChild(r);
    } else {
      var a = document.createElement("div"),
        c = (a.className = "remote-mobile-video", document.createElement("div")),
        i = (c.className = "mobile-broadcastin-container", document.createElement("img")),
        r = (i.className = "banner-image", i.src = ASSET_URL + "/user-video-tutorial.jpeg", document.createElement("video")),
        s = (r.id = "remote-mobile-video-container", document.createElement("div")),
        r = (s.appendChild(r), c.appendChild(i), c.appendChild(s), document.createElement("span")),
        i = (r.className = "example-text", r.innerText = t("example_tutorial"), document.createElement("div")),
        s = (i.className = "bottom-desc-remote", document.createElement("input")),
        l = (s.type = "checkbox", s.checked = p, s.onchange = e => {
          p = e.target.checked, n.disabled = !p;
        }, document.createElement("p")),
        s = (l.innerText = t("is_the_camera_feedback_good"), i.appendChild(s), i.appendChild(l), a.appendChild(c), a.appendChild(r), a.appendChild(i), document.createElement("div")),
        l = (s.className = "mobile-btn-container", document.createElement("button"));
      l.className = "orange-hollow-btn", l.innerText = t("previous_step"), l.onclick = g;
      let n = document.createElement("button");
      n.className = "orange-filled-btn", n.innerText = t("next"), n.disabled = !p || m, n.onclick = () => b("step4"), s.appendChild(l), s.appendChild(n), a.appendChild(s), o.appendChild(a);
    }
    e.appendChild(o), n.appendChild(e);
  }
  window.webStream && window.webStream.getTracks().forEach(e => e.stop()), (() => {
    try {
      r && r.destroy();
      var e = v4(),
        t = new Peer(e);
      (r = t).on("open", e => {
        void 0;
      }), t.on("error", e => {
        void 0;
      }), t.on("close", () => {
        void 0;
      }), t.on("call", t => {
        (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia)({
          video: !0,
          audio: !0
        }, e => {
          a.srcObject = e, t.answer(e), t.on("stream", e => {
            o.srcObject = e;
          });
        });
      });
    } catch (e) {
      void 0;
    }
  })(), (() => {
    if (socket) {
      let e = () => {
        socket.readyState === WebSocket.OPEN ? (socket.send(JSON.stringify({
          event: "resetSession"
        })), d = "") : void 0;
      };
      o.srcObject?.getTracks()?.length || e(), socket.onopen = () => {
        o.srcObject?.getTracks()?.length || e();
      }, socket.onmessage = e => {
        let n = JSON.parse(e.data);
        switch (n?.message?.event || n?.event) {
          case "mobile_connection":
            void 0;
            break;
          case "mobilePreChecksCompleted":
            d = "precheckCompleted", socket?.send(JSON.stringify({
              event: "requestMobileBroadcast"
            })), m = !0, i();
            break;
          case "MobileRecordingStarted":
            void 0;
            break;
          case "mobile-broadcast":
            i(), (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia)({
              video: !0,
              audio: !1
            }, e => {
              if (window.mobileStream = e, r) {
                e = r.call(n?.message?.message, e);
                let t = document.getElementById("remote-mobile-video-container");
                e?.on("stream", e => {
                  t.srcObject = e, t.setAttribute("autoplay", !0), t.setAttribute("playsinline", !0), m = !1;
                }), e?.on("close", () => {
                  t.srcObject && (t.srcObject = null), m = !1;
                }), e?.on("error", e => {
                  void 0;
                });
              } else void 0;
            });
            break;
          case "violation":
            "Violation" === n?.message?.message ? (d = "tokenCode", p = !1, showToast("error", i18next.t("mobile_phone_disconneted")), window.mobileStream && window.mobileStream.getTracks().forEach(e => e.stop()), i()) : void 0;
            break;
          default:
            void 0;
        }
      }, socket.onerror = e => {
        void 0;
      }, socket.onclose = () => {
        void 0;
      };
    } else void 0;
  })(), i();
};
export { MobileProctoring };
import i18next from "i18next";
import { getMultipleCameraDevices, checkForMultipleMicrophones, registerEvent, updatePersistData } from "../utils/functions";
import "../assets/css/prevalidation.css";
import { showTab } from "./examPrechecks";
let PrevalidationInstructions = async g => {
  try {
    let i = null,
      n = null,
      t = [],
      a = [],
      l = null,
      C = null,
      c = {
        width: 640,
        height: 480,
        facingMode: "user"
      },
      r = {
        noiseSuppression: !0
      },
      o = JSON.parse(localStorage.getItem("schoolTheme")),
      d = [{
        svg: `<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
				<circle cx="24" cy="24" r="24" fill="#FF961B"/>
				<g clip-path="url(#clip0)">
				<path d="M23.9409 11.0078C23.5205 11.0078 23.1797 11.3487 23.1797 11.769V36.2299C23.1797 36.6504 23.5205 36.9912 23.9409 36.9912C24.3613 36.9912 24.7021 36.6503 24.7021 36.2299V11.7691C24.7022 11.3487 24.3613 11.0078 23.9409 11.0078Z" fill="white"/>
				<path d="M36.8643 24.7484L35.1193 19.9013C34.8916 19.0308 34.3656 18.3025 33.6677 17.814C34.2407 17.2599 34.5981 16.4842 34.5981 15.626C34.5981 13.947 33.2322 12.5811 31.5532 12.5811C29.8742 12.5811 28.5082 13.947 28.5082 15.626C28.5082 16.4842 28.8657 17.2599 29.4387 17.814C28.7408 18.3025 28.2148 19.0309 27.9871 19.9013L26.2421 24.7484C25.7971 25.9844 26.4853 27.3415 27.747 27.7129V33.1344C27.747 34.3936 28.7714 35.418 30.0307 35.418C30.615 35.418 31.1488 35.1974 31.5531 34.8351C31.9574 35.1974 32.4912 35.418 33.0756 35.418C34.3348 35.418 35.3593 34.3936 35.3593 33.1344V27.7129C36.6195 27.342 37.3097 25.9858 36.8643 24.7484ZM31.5532 14.1035C32.3927 14.1035 33.0757 14.7865 33.0757 15.626C33.0757 16.4655 32.3927 17.1485 31.5532 17.1485C30.7137 17.1485 30.0308 16.4655 30.0308 15.626C30.0308 14.7865 30.7137 14.1035 31.5532 14.1035ZM34.7156 26.2832H34.5981C34.1777 26.2832 33.8369 26.6241 33.8369 27.0444V33.1343C33.8369 33.554 33.4954 33.8955 33.0757 33.8955C32.6559 33.8955 32.3145 33.554 32.3145 33.1343V28.5668C32.3145 28.1464 31.9736 27.8056 31.5533 27.8056C31.1329 27.8056 30.7921 28.1465 30.7921 28.5668V33.1343C30.7921 33.554 30.4506 33.8955 30.0309 33.8955C29.6111 33.8955 29.2696 33.554 29.2696 33.1343V27.0445C29.2696 26.6241 28.9288 26.2833 28.5084 26.2833H28.391C27.8644 26.2833 27.4963 25.7598 27.6748 25.2642C29.5568 20.0367 29.4405 20.365 29.4543 20.3098C29.6955 19.3449 30.5587 18.6709 31.5534 18.6709C32.5481 18.6709 33.4113 19.3449 33.6525 20.3098C33.6663 20.3649 33.5506 20.0381 35.4321 25.2642C35.6102 25.7596 35.2423 26.2832 34.7156 26.2832Z" fill="white"/>
				<path d="M18.596 17.6556C19.079 17.1165 19.3735 16.4051 19.3735 15.626C19.3735 13.947 18.0076 12.5811 16.3286 12.5811C14.6496 12.5811 13.2837 13.947 13.2837 15.6259C13.2837 16.4051 13.5782 17.1165 14.0612 17.6556C12.2538 18.509 11 20.3492 11 22.4771V25.522C11 26.5145 11.6363 27.361 12.5225 27.6752V33.1343C12.5225 34.3935 13.5469 35.4179 14.8062 35.4179C15.3905 35.4179 15.9243 35.1973 16.3286 34.835C16.7329 35.1973 17.2667 35.4179 17.8511 35.4179C19.1103 35.4179 20.1348 34.3935 20.1348 33.1343V27.6752C21.0209 27.361 21.6573 26.5145 21.6573 25.5219V22.477C21.6573 20.3492 20.4035 18.509 18.596 17.6556ZM16.3286 14.1035C17.1681 14.1035 17.8511 14.7865 17.8511 15.626C17.8511 16.4655 17.1681 17.1485 16.3286 17.1485C15.4891 17.1485 14.8062 16.4655 14.8062 15.626C14.8062 14.7865 15.4892 14.1035 16.3286 14.1035ZM20.1348 25.522C20.1348 25.9418 19.7933 26.2832 19.3736 26.2832C18.9532 26.2832 18.6124 26.6241 18.6124 27.0444V33.1343C18.6124 33.554 18.2709 33.8955 17.8512 33.8955C17.4314 33.8955 17.0899 33.554 17.0899 33.1343V28.5668C17.0899 28.1464 16.7491 27.8056 16.3287 27.8056C15.9084 27.8056 15.5675 28.1465 15.5675 28.5668V33.1343C15.5675 33.554 15.226 33.8955 14.8063 33.8955C14.3866 33.8955 14.0451 33.554 14.0451 33.1343V27.0445C14.0451 26.6241 13.7043 26.2833 13.2839 26.2833C12.8641 26.2833 12.5227 25.9418 12.5227 25.522V22.4771C12.5227 20.3784 14.2301 18.6709 16.3288 18.6709C18.4275 18.6709 20.135 20.3784 20.135 22.4771V25.522H20.1348Z" fill="white"/>
				</g>
				<defs>
				<clipPath id="clip0">
				<rect width="26" height="26" fill="white" transform="translate(11 11)"/>
				</clipPath>
				</defs>
				</svg>
				`,
        text: "use_washroom"
      }, {
        svg: `<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
				<circle cx="24" cy="24" r="24" fill="#FF961B"/>
				<path d="M33.6485 12.1421L33.6485 12.1421L33.647 12.1405C33.4633 11.9549 33.205 11.85 32.9375 11.85H15.0625C14.7949 11.85 14.5366 11.9549 14.353 12.1405L14.353 12.1405L14.3514 12.1421C14.1704 12.3305 14.0762 12.5821 14.1041 12.841L14.1041 12.8412L16.5416 35.3412L16.5416 35.3414C16.5933 35.8108 17.0156 36.15 17.5 36.15H30.5C30.9843 36.15 31.4067 35.8108 31.4583 35.3414L31.4583 35.3412L33.1774 19.4699C33.1774 19.4697 33.1775 19.4694 33.1775 19.4691C33.1789 19.4572 33.1804 19.4465 33.182 19.4346L33.182 19.4346L33.1825 19.4306L33.8958 12.8426L33.8959 12.8424C33.9237 12.5822 33.8297 12.3307 33.6485 12.1421ZM24.6056 18.0499C21.9428 16.0339 18.6956 16.3545 16.4846 16.9449L16.1282 13.65H31.8717L31.3219 18.7251C29.2739 19.3361 26.6527 19.6035 24.6058 18.05L24.6056 18.0499ZM31.1143 20.6461L29.6292 34.35H18.3707L16.6826 18.7675C18.5126 18.2227 21.2695 17.8384 23.3942 19.4485C24.9367 20.6179 26.6874 20.997 28.3111 20.997C29.3252 20.997 30.28 20.8443 31.1143 20.6461Z" fill="white" stroke="white" stroke-width="0.3"/>
				</svg>
				`,
        text: "get_water"
      }, {
        svg: `<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
				<circle cx="24" cy="24" r="24" fill="#FF961B"/>
				<path d="M35.5879 23.875C34.607 22.4143 32.9612 22.5876 32.911 22.5762C32.6944 22.5762 32.4813 22.6007 32.2743 22.6469L33.4105 18.2496C33.9762 16.06 32.9529 13.7644 30.9451 12.7239C28.7376 11.5801 26.4016 11.0001 24.0003 11C21.6005 11.0001 19.2644 11.5801 17.057 12.7238C15.0491 13.7643 14.0259 16.06 14.5916 18.2495L15.7278 22.6468C15.3017 22.5518 15.0115 22.582 14.8521 22.5761C12.7668 22.5761 11.3468 24.6901 12.1346 26.6166C13.1602 29.1248 14.9393 31.2261 17.258 32.6566L15.2475 35.3812C14.9145 35.8326 15.0104 36.4684 15.4618 36.8015C15.9161 37.1367 16.5513 37.0356 16.8821 36.5872L19.0912 33.5933C20.6315 34.23 22.2861 34.5605 23.9775 34.5605H24.0246C25.716 34.5605 27.3706 34.23 28.9109 33.5933L31.1199 36.5872C31.452 37.0373 32.0877 37.1353 32.5402 36.8015C32.9916 36.4684 33.0876 35.8326 32.7545 35.3812L30.7441 32.6566C33.0596 31.2281 34.8405 29.1283 35.8675 26.6166C36.2375 25.7117 36.133 24.6868 35.5879 23.875ZM17.9916 14.5274C19.9074 13.5346 21.929 13.0313 24.0018 13.0313C26.073 13.0313 28.0946 13.5346 30.0104 14.5273C31.1859 15.1365 31.7753 16.4581 31.4437 17.7415L29.6801 24.5671C28.2954 25.5942 26.207 26.3438 24.001 26.3438C21.7927 26.3438 19.7038 25.5921 18.3219 24.5671L16.5583 17.7414C16.2268 16.4581 16.8161 15.1364 17.9916 14.5274ZM33.9873 25.8478C32.3364 29.8853 28.4035 32.5293 24.0246 32.5293H23.9775C19.5895 32.5293 15.662 29.8765 14.0148 25.8478C13.7727 25.2557 14.2076 24.6074 14.8521 24.6074C14.9629 24.6263 15.4486 24.5051 15.8198 24.9744C17.1152 26.6123 20.2279 28.375 24.0011 28.375C27.7742 28.375 30.8869 26.6122 32.1823 24.9744C32.3668 24.7412 32.6324 24.6074 32.9109 24.6074C33.0176 24.6263 33.5614 24.5009 33.9014 25.0073C34.0711 25.2599 34.1024 25.5663 33.9873 25.8478Z" fill="white"/>
				</svg>
				`,
        text: "get_comfy"
      }, {
        svg: `<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
					<circle cx="24" cy="24" r="24" fill="#FF961B"/>
					<g clip-path="url(#clip0)">
					<path d="M36.9693 12.941C36.913 11.9082 36.0916 11.0869 35.0588 11.0305C32.9748 10.9167 28.8969 11.0274 24.9975 13.0443C23.0097 14.0725 20.9073 15.8158 19.2296 17.8271C19.2089 17.8519 19.1888 17.8768 19.1683 17.9017L15.3607 18.1958C14.734 18.2442 14.1757 18.5727 13.8291 19.097L11.2314 23.0261C10.9685 23.4237 10.9267 23.9213 11.1196 24.3571C11.3124 24.793 11.7087 25.0968 12.1797 25.1698L15.3876 25.6666C15.3763 25.729 15.3649 25.7913 15.3545 25.8537C15.2477 26.4925 15.4594 27.1493 15.9208 27.6106L20.3891 32.079C20.7717 32.4616 21.2886 32.6725 21.8182 32.6725C21.9273 32.6725 22.037 32.6635 22.1462 32.6452C22.2085 32.6348 22.2708 32.6235 22.3332 32.6121L22.83 35.8201C22.903 36.2911 23.2068 36.6874 23.6426 36.8803C23.8239 36.9605 24.0158 37.0001 24.2069 37.0001C24.4751 37 24.7415 36.9219 24.9737 36.7684L28.9027 34.1707C29.4271 33.824 29.7555 33.2658 29.8039 32.6391L30.098 28.8316C30.1228 28.8111 30.1478 28.791 30.1726 28.7703C32.184 27.0925 33.9273 24.9902 34.9555 23.0023C36.9724 19.1028 37.083 15.0248 36.9693 12.941ZM28.0626 32.8999L24.3042 35.3847L23.82 32.2584C25.4084 31.7914 26.9797 31.0434 28.4767 30.0413L28.2851 32.5217C28.2732 32.6764 28.192 32.8143 28.0626 32.8999ZM21.4663 31.0018L16.9979 26.5334C16.8839 26.4194 16.8312 26.2592 16.8571 26.1048C16.9899 25.3105 17.1964 24.5543 17.4519 23.8419L24.1564 30.5465C23.3009 30.8529 22.5345 31.0357 21.8949 31.1427C21.7404 31.1684 21.5803 31.1158 21.4663 31.0018ZM15.4781 19.7147L17.9584 19.5231C16.9563 21.0201 16.2083 22.5914 15.7413 24.1799L12.615 23.6957L15.0999 19.9372C15.1855 19.8077 15.3234 19.7267 15.4781 19.7147ZM29.1969 27.6003C27.9663 28.6268 26.7718 29.3692 25.6707 29.9064L18.0931 22.3288C18.7968 20.8915 19.6557 19.6946 20.3994 18.803C21.9521 16.9416 23.8831 15.3358 25.6975 14.3974C29.2762 12.5463 33.0468 12.4466 34.9759 12.5516C35.2312 12.5655 35.4343 12.7686 35.4482 13.024C35.5534 14.9531 35.4535 18.7236 33.6024 22.3024C32.664 24.1167 31.0582 26.0477 29.1969 27.6003Z" fill="white"/>
					<path d="M28.81 22.9971C29.7851 22.997 30.7606 22.6258 31.5029 21.8835C32.2223 21.1641 32.6184 20.2077 32.6184 19.1905C32.6184 18.1732 32.2223 17.2168 31.5029 16.4975C30.018 15.0125 27.6018 15.0126 26.117 16.4975C25.3976 17.2168 25.0015 18.1732 25.0015 19.1905C25.0015 20.2077 25.3977 21.1641 26.117 21.8835C26.8595 22.626 27.8345 22.9972 28.81 22.9971ZM27.1941 17.5747C27.6396 17.1292 28.2247 16.9064 28.8099 16.9064C29.3951 16.9064 29.9802 17.1292 30.4257 17.5747C30.8573 18.0063 31.0949 18.5801 31.0949 19.1904C31.0949 19.8008 30.8573 20.3746 30.4257 20.8062C29.5348 21.6972 28.085 21.6971 27.194 20.8062C26.7625 20.3746 26.5248 19.8008 26.5248 19.1905C26.5248 18.5801 26.7625 18.0063 27.1941 17.5747Z" fill="white"/>
					<path d="M11.7771 32.4264C11.972 32.4264 12.167 32.3521 12.3157 32.2033L14.8026 29.7163C15.1 29.4189 15.1 28.9366 14.8026 28.6391C14.5051 28.3416 14.0228 28.3416 13.7253 28.6391L11.2385 31.126C10.941 31.4235 10.941 31.9058 11.2385 32.2033C11.3872 32.352 11.5821 32.4264 11.7771 32.4264Z" fill="white"/>
					<path d="M17.0816 30.9184C16.7842 30.6209 16.3018 30.6209 16.0044 30.9184L11.2231 35.6997C10.9256 35.9972 10.9256 36.4795 11.2231 36.777C11.3718 36.9257 11.5667 37 11.7617 37C11.9566 37 12.1516 36.9257 12.3003 36.7769L17.0815 31.9956C17.3791 31.6982 17.3791 31.2159 17.0816 30.9184Z" fill="white"/>
					<path d="M18.2835 33.1977L15.7966 35.6846C15.4991 35.9821 15.4991 36.4644 15.7966 36.7619C15.9453 36.9106 16.1403 36.985 16.3352 36.985C16.5301 36.985 16.7251 36.9106 16.8738 36.7619L19.3607 34.2749C19.6581 33.9775 19.6581 33.4952 19.3607 33.1977C19.0632 32.9002 18.5809 32.9002 18.2835 33.1977Z" fill="white"/>
					</g>
					<defs>
					<clipPath id="clip0">
					<rect width="26" height="26" fill="white" transform="translate(11 11)"/>
					</clipPath>
					</defs>
					</svg>
					`,
        text: "get_ready"
      }],
      s = (void 0, async (e, t) => {
        "camera" === t && (c = {
          ...c,
          deviceId: {
            ideal: e
          }
        }, localStorage.setItem("deviceId", e)), "microphone" === t && (r = {
          ...r,
          deviceId: {
            ideal: e
          }
        }, localStorage.setItem("microphoneID", e)), v();
      }),
      m = () => {
        n && (n?.getTracks()?.forEach(e => e.stop()), n = null), registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "prevalidation_passed"
        }), updatePersistData("preChecksSteps", {
          preValidation: !0
        }), showTab("IdentityVerificationScreenOne");
      };
    let p = (e, t, i, n, a) => {
      e.textContent = i18next.t("system_diagnostic"), t.textContent = i18next.t("initial_system_check_passed"), i.textContent = i18next.t("select_preferred_camera_and_microphone"), Array.isArray(n) && a.forEach((e, t) => {
        n[t] && (n[t].textContent = i18next.t(e.text));
      });
    };
    let h = () => {
        let i = document.getElementById("cameraDropdown"),
          n = document.getElementById("microphoneDropdown");
        var e = document.getElementById("message");
        i.innerHTML = "", n.innerHTML = "", t.forEach(e => {
          var t = document.createElement("option");
          t.value = e.id, t.textContent = e.name, e.id === C && (t.selected = !0), i.appendChild(t);
        }), a.forEach(e => {
          var t = document.createElement("option");
          t.value = e.id, t.textContent = e.name, e.id === l && (t.selected = !0), n.appendChild(t);
        }), e.textContent = i18next.t("select_preferred_camera_and_microphone"), i.onchange = e => {
          C = e.target.value, s(C, "camera");
        }, n.onchange = e => {
          l = e.target.value, s(l, "microphone");
        };
      },
      v = async () => {
        var t = document.getElementById("videoContainer");
        t.innerHTML = "";
        try {
          n = await navigator.mediaDevices.getUserMedia({
            video: c,
            audio: !1
          });
          let e = document.getElementById("myVideo");
          e || ((e = document.createElement("video")).id = "myVideo", e.className = "my-recorded-video", e.controls = !1, e.autoplay = !0), e.srcObject = n, t.appendChild(e), i = "done", h();
        } catch (e) {
          void 0, void 0, h();
        }
      };
    (() => {
      let e = g.querySelector(".ivso-container");
      e ? e.innerHTML = "" : ((e = document.createElement("div")).className = "ivso-container", g.appendChild(e));
      var t = document.createElement("div"),
        i = document.createElement("div");
      t.className = "pvi-header-title", i.className = "pvi-msg", e.append(t), e.append(i);
      let n = document.createElement("div"),
        a = (n.className = "pvi-instructions-container", []);
      d.forEach(e => {
        var t = document.createElement("div");
        t.className = "pvi-instruction-svg", t.innerHTML = e.svg;
        t.querySelectorAll("circle").forEach(e => {
          e.setAttribute("fill", "" + o?.theming);
        }), n.appendChild(t);
        e = document.createElement("div");
        e.className = "pvi-instruction-txt", a.push(e), n.appendChild(e);
      }), e.appendChild(n);
      var l = document.createElement("div"),
        C = (l.id = "videoMainContainer", l.className = "pvi-header-img", document.createElement("div")),
        C = (C.id = "videoContainer", l.appendChild(C), e.appendChild(l), document.createElement("div")),
        l = (C.id = "dropdownContainer", C.className = "multi-device-block", document.createElement("div")),
        c = (l.className = "camera-container", document.createElement("select")),
        c = (c.id = "cameraDropdown", l.appendChild(c), C.appendChild(l), document.createElement("div")),
        l = (c.className = "microphone-container", document.createElement("select")),
        l = (l.id = "microphoneDropdown", c.appendChild(l), C.appendChild(c), document.createElement("div")),
        c = (l.id = "message", l.className = "pvi-query-msg", document.createElement("div")),
        r = (c.id = "button-container", c.className = "pvi-btn-container", document.createElement("button"));
      r.id = "continue-btn", r.textContent = i18next.t("continue"), r.className = "orange-filled-btn", r.style.marginLeft = "auto", r.style.padding = "9px 32px", r.addEventListener("click", m), c.append(r), e.appendChild(C), e.appendChild(l), e.appendChild(c), g.appendChild(e), p(t, i, l, a, d);
    })(), (async () => {
      t = (t = await getMultipleCameraDevices())?.map(e => ({
        id: e.deviceId,
        name: e.label,
        ...e
      })), localStorage.setItem("deviceId", t?.length ? t[0].id : null), C = t?.length ? t[0].id : null, a = (a = await checkForMultipleMicrophones())?.map(e => ({
        id: e.deviceId,
        name: e.label,
        ...e
      })), localStorage.setItem("microphoneID", a?.length ? a[0].id : null), l = a?.length ? a[0].id : null, v(), h();
    })(), i18next.on("languageChanged", () => {
      var e = document.querySelector(".pvi-header-title"),
        t = document.querySelector(".pvi-msg"),
        i = document.getElementById("message"),
        n = document.querySelectorAll(".pvi-instruction-txt");
      p(e, t, i, Array.from(n), d);
    });
  } catch (e) {
    void 0;
  }
};
export { PrevalidationInstructions };
let createSpinner = ({
  backgroundColor: e,
  style: n
}) => {
  var r = document.createElement("div");
  r.className = "spinner", n && Object.assign(r.style, n);
  let a = e ? {
    backgroundColor: e
  } : {
    backgroundColor: "#3498db"
  };
  function t(e) {
    var n = document.createElement("div");
    return n.className = e, Object.assign(n.style, a), n;
  }
  var n = t("bounce1"),
    e = t("bounce2"),
    c = t("bounce3");
  return r.appendChild(n), r.appendChild(e), r.appendChild(c), r;
};
export { createSpinner };
import { checkCamera, checkMicrophone, checkNotification, detectMultipleScreens, getLocation, getNetworkUploadSpeed, getSecureFeatures, registerEvent, updatePersistData } from "../utils/functions";
import "../assets/css/systemDiagnostic.css";
import i18next from "i18next";
import { showTab } from "./examPrechecks";
import { ASSET_URL } from "../utils/constant";
let cameraStream = null,
  audioStream = null,
  videoGreen = ASSET_URL + "/video-camera-green.svg",
  microPhoneGreen = ASSET_URL + "/microphone-green.svg",
  networkGreen = ASSET_URL + "/spinner-gap-green.svg",
  locationGreen = ASSET_URL + "/location-pin-green.svg",
  notificationGreen = ASSET_URL + "/bell-ringing-green.svg",
  multipleScreenGreen = ASSET_URL + "/multiple-screen-green.svg",
  videoRed = ASSET_URL + "/video-camera-red.svg",
  microPhoneRed = ASSET_URL + "/microphone-red.svg",
  networkRed = ASSET_URL + "/spinner-maroon.svg",
  locationRed = ASSET_URL + "/location-pin-red.svg",
  notificationRed = ASSET_URL + "/bell-ringing-maroon.svg",
  multipleScreenRed = ASSET_URL + "/multiple-screen-red.svg",
  createDiagnosticItem = (e, t) => {
    var n = document.createElement("div"),
      i = (n.classList.add("diagnostic-item", "grey-box"), n.id = e + "DiagnosticItem", document.createElement("div")),
      o = (i.classList.add("grey-box-right"), document.createElement("img")),
      c = (o.id = e + "StatusIcon", o.src = ASSET_URL + "/video-camera-light-gray.svg", o.alt = "", document.createElement("label")),
      t = (c.textContent = t, document.createElement("div")),
      a = (t.classList.add("grey-box-left"), document.createElement("img"));
    return a.id = e + "StatusLoading", a.src = ASSET_URL + "/loading-gray.svg", a.alt = "", i.appendChild(o), i.appendChild(c), t.appendChild(a), n.appendChild(i), n.appendChild(t), n;
  },
  renderUI = e => {
    e.innerHTML = "";
    var t = document.createElement("div"),
      n = (t.classList.add("system-diagnostic-test-screen"), document.createElement("h1")),
      i = (n.classList.add("heading"), n.textContent = i18next.t("system_diagnostic"), document.createElement("div")),
      o = (i.classList.add("diagnostic-status", "container-box"), document.createElement("div")),
      c = (o.classList.add("container"), document.createElement("div")),
      a = (c.classList.add("container-top"), document.createElement("label")),
      r = (a.classList.add("description"), a.textContent = i18next.t("system_diagnostic_msg"), document.createElement("div")),
      s = (r.classList.add("container-prompt"), document.createElement("img"));
    s.src = ASSET_URL + "/user-permission-english.svg", s.alt = "", s.width = 350, s.classList.add("prompt-image");
    let d = document.createElement("div");
    d.classList.add("container-middle", "box-section");
    ["webcam", "microphone", "connection", "notification", "location", "screen"].forEach(e => {
      var t = i18next.t(e),
        e = createDiagnosticItem(e, t);
      d.appendChild(e);
    });
    var l = document.createElement("div"),
      m = (l.classList.add("button-section"), document.createElement("button"));
    m.classList.add("orange-filled-btn"), m.id = "diagnosticContinueBtn", m.disabled = !0, m.textContent = "Continue", m.addEventListener("click", () => {
      cameraStream && cameraStream.getTracks().forEach(e => e.stop()), audioStream && audioStream.getTracks().forEach(e => e.stop()), registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "system_diagnostic_passed"
      }), updatePersistData("preChecksSteps", {
        diagnosticStep: !0
      }), showTab("Prevalidationinstruction");
    }), l.appendChild(m), o.append(c, a, r, s, d, l), i.appendChild(o), t.append(n, i), e.appendChild(t);
  },
  runSystemDiagnostics = async e => {
    if (!e) return void void 0;
    renderUI(e);
    let i = (e, t, n) => {
        var i = document.getElementById(e + "StatusIcon"),
          e = document.getElementById(e + "StatusLoading");
        i && e && (i.src = n ? t.success : t.failure, e.src = n ? ASSET_URL + "/checkmark-rounded-green.png" : ASSET_URL + "/x-circle.png");
      },
      n = (t, n) => {
        var e = document.getElementById(t + "DiagnosticItem");
        e && e.addEventListener("click", async () => {
          var e = await n();
          i(t, {
            success: o[t],
            failure: c[t]
          }, e);
        });
      },
      o = {
        webcam: videoGreen,
        microphone: microPhoneGreen,
        connection: networkGreen,
        location: locationGreen,
        notification: notificationGreen,
        screen: multipleScreenGreen
      },
      c = {
        webcam: videoRed,
        microphone: microPhoneRed,
        connection: networkRed,
        location: locationRed,
        notification: notificationRed,
        screen: multipleScreenRed
      };
    try {
      var a = await getSecureFeatures(),
        r = a?.entities || [];
      let t = a?.settings;
      var s = r.find(e => "record_video" === e.key),
        d = r.find(e => "record_audio" === e.key),
        l = r.find(e => "internet_speed" === e.key),
        m = r.find(e => "track_location" === e.key),
        u = r.find(e => "enable_notifications" === e.key),
        p = r.find(e => "verify_desktop" === e.key),
        g = [],
        S = (s ? g.push(checkCamera().then(e => (cameraStream = e, i("webcam", {
          success: videoGreen,
          failure: videoRed
        }, e), n("webcam", checkCamera), e))) : i("webcam", {
          success: videoGreen,
          failure: videoRed
        }, !0), d ? g.push(checkMicrophone().then(e => (audioStream = e, i("microphone", {
          success: microPhoneGreen,
          failure: microPhoneRed
        }, e), n("microphone", checkMicrophone), e))) : i("microphone", {
          success: microPhoneGreen,
          failure: microPhoneRed
        }, !0), l ? g.push(getNetworkUploadSpeed().then(e => {
          e = e.speedMbps > t?.upload_speed || .168;
          return i("connection", {
            success: networkGreen,
            failure: networkRed
          }, e), n("connection", getNetworkUploadSpeed), e;
        })) : i("connection", {
          success: networkGreen,
          failure: networkRed
        }, !0), m ? g.push(getLocation().then(e => (updatePersistData("session", {
          location: e
        }), i("location", {
          success: locationGreen,
          failure: locationRed
        }, e), n("location", getLocation), e))) : i("location", {
          success: locationGreen,
          failure: locationRed
        }, !0), u ? g.push(checkNotification().then(e => (i("notification", {
          success: notificationGreen,
          failure: notificationRed
        }, e), n("notification", checkNotification), e))) : i("notification", {
          success: notificationGreen,
          failure: notificationRed
        }, !0), p ? g.push(detectMultipleScreens().then(e => (i("screen", {
          success: multipleScreenGreen,
          failure: multipleScreenRed
        }, !e), n("screen", detectMultipleScreens), e))) : i("screen", {
          success: multipleScreenGreen,
          failure: multipleScreenRed
        }, !0), await Promise.all(g), cameraStream && cameraStream.getTracks().forEach(e => e.stop()), audioStream && audioStream.getTracks().forEach(e => e.stop()), Object.keys(o).every(e => {
          var t = document.getElementById(e + "StatusIcon")?.src;
          return !!t && new URL(t).pathname === new URL(o[e]).pathname;
        }));
      document.getElementById("diagnosticContinueBtn").disabled = !S;
    } catch (e) {
      void 0;
    } finally {
      cameraStream && cameraStream.getTracks().forEach(e => e.stop()), audioStream && audioStream.getTracks().forEach(e => e.stop());
    }
  },
  updateDiagnosticText = () => {
    ["webcam", "microphone", "connection", "notification", "location", "screen"].forEach(e => {
      var t = document.querySelector(`#${e}DiagnosticItem label`);
      t && (t.textContent = i18next.t(e));
    });
    var e = document.querySelector(".heading"),
      e = (e && (e.textContent = i18next.t("system_diagnostic")), document.querySelector(".description"));
    e && (e.textContent = i18next.t("system_diagnostic_msg"));
  };
i18next.on("languageChanged", () => {
  updateDiagnosticText();
});
export { runSystemDiagnostics };
import axios from "../utils/axios.js";
import { getAuthenticationToken } from "../utils/functions.js";
let getAllAiEvents = async () => {
    var e = getAuthenticationToken();
    return axios.get("/sessions/ai_event/", {
      headers: {
        Authorization: "Basic " + e
      }
    });
  },
  createAiEvent = async e => {
    var t = getAuthenticationToken();
    return axios.post("/sessions/candidate_ai_event/", e, {
      headers: {
        token: t
      }
    });
  },
  editAiEvent = async e => {
    var t = getAuthenticationToken();
    return axios.put("/sessions/ai_event/", e, {
      headers: {
        Authorization: "Basic " + t
      }
    });
  },
  deleteEvent = async e => {
    var t = getAuthenticationToken();
    return axios.delete("/sessions/ai_event/?id=" + e, {
      headers: {
        Authorization: "Basic " + t
      }
    });
  };
export { getAllAiEvents, createAiEvent, editAiEvent, deleteEvent };
import axios from "../utils/axios.js";
import { getAuthenticationToken } from "../utils/functions.js";
let createCandidateAssessment = async s => {
  var e = getAuthenticationToken();
  return axios.post("/assessments/candidate_assessment/", s, {
    headers: {
      token: e
    }
  });
};
export { createCandidateAssessment };
import axiosInstance from "../utils/axios";
let logonSchool = async o => axiosInstance.post("/auth/logon/", o);
export { logonSchool };
import axiosInstance from "../utils/axios.js";
import { getAuthenticationToken } from "../utils/functions.js";
let changeCandidateAssessmentStatus = async t => {
  var s = getAuthenticationToken();
  return axiosInstance.put("/candidate/change_candidate_assessment_status/", t, {
    headers: {
      token: s
    }
  });
};
export { changeCandidateAssessmentStatus };
import axiosInstance from "../utils/axios.js";
import { getAuthenticationToken } from "../utils/functions.js";
let getCandidateInviteAssessmentSection = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.get("assessment/public_candidate_invite_assessment_section/", {
      headers: {
        token: t
      },
      params: e
    });
  },
  changeCandidateInviteAssessmentSectionStatus = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.put("/assessment/change_candidate_invite_assessment_section_status/", e, {
      headers: {
        token: t
      }
    });
  };
export { getCandidateInviteAssessmentSection, changeCandidateInviteAssessmentSectionStatus };
import { getAuthenticationToken } from "../utils/functions";
import axios from "../utils/axios.js";
let createCandidate = async t => {
  var e = getAuthenticationToken();
  return axios.post("/candidates/candidate_candidate/", t, {
    headers: {
      token: e
    }
  });
};
export { createCandidate };
import axios from "../utils/axios.js";
import { getAuthenticationToken } from "../utils/functions.js";
let getAllEvents = async () => {
    var e = getAuthenticationToken();
    return axios.get("/section_session/event/", {
      headers: {
        Authorization: "Basic " + e
      }
    });
  },
  createEvent = async e => {
    var t = getAuthenticationToken();
    return axios.post("/sessions/candidate_event/", e, {
      headers: {
        token: t
      }
    });
  },
  editEvent = async e => {
    var t = getAuthenticationToken();
    return axios.put("/section_session/event/", e, {
      headers: {
        Authorization: "Basic " + t
      }
    });
  },
  deleteEvent = async e => {
    var t = getAuthenticationToken();
    return axios.delete("/section_session/event/?id=" + e, {
      headers: {
        Authorization: "Basic " + t
      }
    });
  };
export { getAllEvents, createEvent, editEvent, deleteEvent };
import axios from "../utils/axios.js";
import { getAuthenticationToken } from "../utils/functions.js";
let getProfile = async e => {
    var t = getAuthenticationToken();
    return axios.get("/profiles/candidate_profile/", {
      headers: {
        token: "" + t
      },
      params: e
    });
  },
  createProfile = async e => {
    var t = getAuthenticationToken();
    return axios.post("/profiles/profile/", e, {
      headers: {
        token: t
      }
    });
  },
  editProfile = async e => {
    var t = getAuthenticationToken();
    return axios.put("/profiles/profile/", e, {
      headers: {
        Authorization: "Basic " + t
      }
    });
  },
  deleteProfile = async e => {
    var t = getAuthenticationToken();
    return axios.delete("/profiles/profile/?id=" + e, {
      headers: {
        Authorization: "Basic " + t
      }
    });
  };
export { getProfile, createProfile, editProfile, deleteProfile };
import axiosInstance from "../utils/axios";
import { getAuthenticationToken } from "../utils/functions";
let addSectionSession = async e => {
    var n = getAuthenticationToken();
    return axiosInstance.post("/sessions/candidate_session/", e, {
      headers: {
        token: n
      }
    });
  },
  editSectionSession = async e => {
    var n = getAuthenticationToken();
    return axiosInstance.put("/sessions/candidate_session/", e, {
      headers: {
        token: n
      }
    });
  };
export { addSectionSession, editSectionSession };
import axiosInstance from "../utils/axios";
import { getAuthenticationToken } from "../utils/functions";
let getRoomSid = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.get("/twilio/create_room/", {
      headers: {
        token: "" + t
      },
      params: e
    });
  },
  getRecordings = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.get("/twilio/get_recordings_sid/", {
      headers: {
        token: "" + t
      },
      params: e
    });
  },
  getToken = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.get("/twilio/get-token/", {
      headers: {
        token: "" + t
      },
      params: e
    });
  },
  getRecordingSid = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.post("/twilio/get_SID/", e, {
      headers: {
        token: "" + t
      }
    });
  },
  getCreateRoom = async e => {
    var t = getAuthenticationToken();
    return axiosInstance.post("/twilio/candidate_get_create_room/", e, {
      headers: {
        token: "" + t
      }
    });
  };
export { getRoomSid, getRecordings, getToken, getRecordingSid, getCreateRoom };
import * as TwilioVideo from "twilio-video";
import { newStream } from "../ExamPrepreation/IdentityVerificationScreenFive";
import { convertDataIntoParse, findConfigs, findIncidentLevel, getDateTime, getSecureFeatures, getTimeInSeconds, lockBrowserFromContent, registerAIEvent, registerEvent, showToast, unlockBrowserFromContent, updatePersistData } from "../utils/functions";
import * as cocoSsd from "@tensorflow-models/coco-ssd";
import * as tf from "@tensorflow/tfjs";
import socket from "../utils/socket";
import { getCreateRoom } from "../services/twilio.services";
import { LockDownOptions } from "../utils/constant";
import "../assets/css/start-recording.css";
import interact from "interactjs";
import i18next from "i18next";
let roomInstance = null,
  aiProcessingInterval = null,
  aiEvents = [],
  mediaStream = null,
  mobileRoomInstance = null,
  startRecording = async () => {
    let e;
    var t = null,
      o = [],
      a = [],
      s = [];
    let n = getSecureFeatures(),
      i = convertDataIntoParse("session");
    window.addEventListener("popstate", () => {
      window.startRecordingCallBack({
        message: "session_has_been_terminated_send_resume_to_restart_again"
      });
    });
    if (socket ? (socket.onmessage = e => {
      var t = JSON.parse(e?.data);
      switch (t?.message?.event || t?.event) {
        case "MobileRecordingStarted":
          getCreateRoom({
            room_name: i?.mobileRoomSessionId,
            auto_record: !1
          }).then(async e => {
            e = await TwilioVideo.connect(e?.data?.token, {
              audio: !1,
              video: !1
            });
            (mobileRoomInstance = e) && VideoChat(e);
          }).catch(e => {
            updatePersistData("preChecksSteps", {
              mobileConnection: !1,
              screenSharing: !1
            }), window.startRecordingCallBack({
              message: "session_has_been_terminated_send_resume_to_restart_again"
            }), void 0;
          });
          break;
        case "violation":
          "Violation" === t?.message?.message && (updatePersistData("preChecksSteps", {
            mobileConnection: !1,
            screenSharing: !1
          }), showToast("error", i18next.t("mobile_phone_disconneted")), window.startRecordingCallBack({
            message: "session_has_been_terminated_send_resume_to_restart_again"
          })), registerEvent({
            eventType: "error",
            notify: !1,
            eventName: t?.message?.message,
            eventValue: getDateTime()
          });
          break;
        default:
          void 0;
      }
    }, socket.onerror = e => {
      void 0;
    }, socket.onclose = () => {
      void 0;
    }) : void 0, !newStream?.getTracks()?.length && findConfigs(["record_screen"], n?.entities)?.length) window.startRecordingCallBack({
      message: "session_has_been_terminated_send_resume_to_restart_again"
    });else if (null !== n?.entities) {
      n?.entities?.filter(e => LockDownOptions.includes(e.key))?.length && (await lockBrowserFromContent(n?.entities || []));
      var r = {
        audio: !!findConfigs(["record_audio"], n?.entities).length && (null === localStorage.getItem("microphoneID") || {
          deviceId: {
            exact: localStorage.getItem("microphoneID")
          }
        }),
        video: !!findConfigs(["record_video"], n?.entities).length && (null === localStorage.getItem("deviceId") || {
          deviceId: {
            exact: localStorage.getItem("deviceId")
          }
        })
      };
      try {
        var c,
          d = new Date(),
          l = d.getTime(),
          m = i?.sessionId || d.getTime(),
          p = (updatePersistData("session", {
            roomSessionId: l,
            sessionId: m,
            sessionStartTime: getTimeInSeconds({
              isUTC: !0,
              inputDate: d
            }),
            sessionStatus: "Attending"
          }), await TwilioVideo.connect(i?.twilioToken, r));
        roomInstance = p, mediaStream = await navigator.mediaDevices.getUserMedia({
          video: !localStorage.getItem("deviceId") || {
            deviceId: {
              exact: localStorage.getItem("deviceId")
            }
          },
          audio: !localStorage.getItem("microphoneID") || {
            deviceId: {
              exact: localStorage.getItem("microphoneID")
            }
          }
        }), n?.entities?.find(e => "record_video" === e.key) && startAIWebcam(mediaStream), e = new TwilioVideo.LocalVideoTrack(mediaStream.getVideoTracks()[0]), await p.localParticipant.publishTrack(e), n?.entities.find(e => "record_video" === e.key) && (o = [...o, ...Array.from(p?.localParticipant?.videoTracks, ([e, t]) => ({
          name: e,
          value: t
        })).map(e => e.name)], a = [...a, ...Array.from(p?.localParticipant?.audioTracks, ([e, t]) => ({
          name: e,
          value: t
        })).map(e => e.name)], updatePersistData("session", {
          user_video_name: o,
          user_audio_name: a,
          room_id: p?.sid
        })), i?.screenRecordingStream && findConfigs(["record_screen"], n?.entities).length && (t = new TwilioVideo.LocalVideoTrack(newStream?.getTracks()[0]), c = await p.localParticipant.publishTrack(t), s = [...s, c.trackSid], updatePersistData("session", {
          screen_sharing_video_name: s
        })), registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "browser_locked_successfully",
          eventValue: getDateTime()
        }), registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "recording_started_successfully",
          startAt: d
        }), socket && socket.readyState === WebSocket.OPEN && socket.send(JSON.stringify({
          event: "startRecording",
          data: "Web video recording started"
        })), window.startRecordingCallBack && window.startRecordingCallBack({
          message: "recording_started_successfully"
        }), p.on("reconnecting", () => {
          cleanupLocalVideo(e), findConfigs(["mobile_proctoring"], n?.entities).length ? (updatePersistData("preChecksSteps", {
            mobileConnection: !1,
            screenSharing: !1
          }), showToast("error", i18next.t("mobile_phone_disconneted"))) : (updatePersistData("preChecksSteps", {
            screenSharing: !1
          }), showToast("error", i18next.t("internet_connection_not_working"))), window.startRecordingCallBack && window.startRecordingCallBack({
            message: "web_internet_connection_disconnected"
          });
        });
      } catch (e) {
        updatePersistData("session", {
          sessionStatus: "Terminated"
        });
      }
    }
  },
  PREDICTION = ["cell phone", "book"],
  setupWebcam = async e => {
    let t = document.getElementById("webcam-container");
    t || ((t = document.createElement("div")).id = "webcam-container", t.style.display = "flex", t.style.zIndex = "999", t.style.position = "absolute", t.style.rowGap = "10px", t.style.flexDirection = "column", t.style.justifyContent = "start", t.style.marginLeft = "10px", document.body.appendChild(t));
    var o = document.createElement("div");
    o.style.position = "relative", o.style.width = "200px", o.style.height = "150px";
    let a = document.createElement("video"),
      s = (a.autoplay = !0, a.muted = !0, a.srcObject = e, a.style.position = "absolute", a.style.width = "100%", a.style.height = "auto", document.createElement("canvas"));
    return s.id = "canvas", s.style.position = "absolute", s.style.top = "0", s.style.left = "0", s.style.width = "100%", s.style.height = "100%", o.appendChild(a), o.appendChild(s), t.appendChild(o), a.addEventListener("loadedmetadata", () => {
      s.width = a.videoWidth, s.height = a.videoHeight;
    }), interact(t).draggable({
      listeners: {
        move(e) {
          var t = e.target,
            o = (parseFloat(t.getAttribute("data-x")) || 0) + e.dx,
            e = (parseFloat(t.getAttribute("data-y")) || 0) + e.dy;
          t.style.transform = `translate(${o}px, ${e}px)`, t.setAttribute("data-x", o), t.setAttribute("data-y", e);
        }
      }
    }), {
      videoElement: a,
      canvas: s
    };
  },
  handleVideoResize = (e, n) => {
    e.forEach(e => {
      var t, o, a, s;
      !PREDICTION.includes(e.class) && "person" !== e.class || ([t, o, a, s] = e.bbox, n.beginPath(), n.rect(t, o, a, s), n.lineWidth = 2, n.strokeStyle = "red", n.fillStyle = "red", n.stroke(), n.font = "16px Arial", n.fillText("" + e.class, t, 10 < o ? o - 5 : 10));
    });
  },
  startAIWebcam = async e => {
    await tf.setBackend("webgl"), await tf.ready();
    let n = await cocoSsd.load(),
      {
        videoElement: i,
        canvas: r
      } = await setupWebcam(e),
      c = r.getContext("2d"),
      d = convertDataIntoParse("session"),
      l = d?.quizStartTime ? parseInt((getTimeInSeconds({
        isUTC: !0
      }) - d?.quizStartTime) / 1e3) : 0;
    aiProcessingInterval = setInterval(async () => {
      try {
        if (4 === i.readyState) {
          var e = tf.browser.fromPixels(i),
            s = await n.detect(e);
          c.clearRect(0, 0, r.width, r.height), handleVideoResize(s, c, r);
          let a = {},
            t = {},
            o = !1;
          s.forEach(e => {
            "person" === e.class && t?.class ? o || (a = {
              ...a,
              multiple_people: (a.multiple_people || 0) + 1
            }, o = !0) : "person" === e.class ? t = e : PREDICTION.includes(e.class) && (a = {
              ...a,
              object_detected: (a[e.class] || 0) + 1
            });
          }), t.class || (a = {
            ...a,
            person_missing: (a.person_missing || 0) + 1
          }), ["person_missing", "object_detected", "multiple_people"].forEach(t => {
            var o = aiEvents.findIndex(e => e[t]);
            let e = -1 < o ? aiEvents.splice(o, 1)[0] : void 0;
            if (!a[t] || e?.[t] && !e?.end_time) a[t] && e?.[t] ? (e = {
              ...e,
              time_span: (Number(e.time_span) || 0) + 1
            }, aiEvents.push(e)) : !a[t] && e?.[t] && (e = {
              ...e,
              end_time: Number(e.start_time) + Number(e.time_span)
            }, o = {
              eventType: "success",
              notify: !0,
              eventName: t,
              startTime: e.start_time,
              endTime: Number(e.start_time) + Number(e.time_span)
            }, registerAIEvent(o), updatePersistData("session", {
              aiEvents: [o, ...d.aiEvents]
            }));else {
              o = {
                start_time: l,
                time_span: 1,
                [t]: a[t]
              };
              let e = "";
              void 0, e = "person_missing" === t ? "no_person_detected_come_back_to_assessment" : "object_detected" === t ? "unauthorized_object_detected_please_put_it_away" : "multiple_people" === t ? "multiple_people_detected" : "ai_recorder_unknown_violation", void 0, showToast("error", i18next.t(e)), aiEvents.push(o);
            }
          });
        }
      } catch (e) {
        void 0;
      }
    }, 1e3);
  },
  cleanupLocalVideo = () => {
    var e,
      t = document.getElementById("webcam-container");
    t && ((e = t.querySelector("video")) && (e.pause(), e.srcObject.getTracks().forEach(e => e.stop()), e.srcObject = null), (e = t.querySelector("canvas")) && e.remove(), t.remove());
  },
  stopAllRecordings = async () => {
    try {
      var e = getSecureFeatures(),
        t = convertDataIntoParse("session"),
        o = (socket && socket.readyState === WebSocket.OPEN && socket.send(JSON.stringify({
          event: "stopRecording",
          data: "Web video recording stopped"
        })), 0 < t?.aiEvents?.length ? findIncidentLevel(t?.aiEvents) : "low"),
        a = (updatePersistData("session", {
          recordingEnded: !0,
          sessionStatus: "Completed",
          incident_level: o
        }), cleanupLocalVideo(), window.sharedMediaStream && (window.sharedMediaStream.getTracks().forEach(e => e.stop()), window.sharedMediaStream = null), mediaStream && (mediaStream.getTracks().forEach(e => e.stop()), mediaStream = null), newStream && newStream.getVideoTracks().forEach(e => {
          e.stop(), e.enabled = !1;
        }), newStream && newStream.getAudioTracks().forEach(e => {
          e.stop(), e.enabled = !1;
        }), mobileRoomInstance && (mobileRoomInstance.localParticipant.tracks.forEach(e => {
          e = e.track;
          e && (e.stop(), e.detach().forEach(e => e.remove()), e.disable(), mobileRoomInstance.localParticipant.unpublishTrack(e));
        }), mobileRoomInstance.disconnect(), mobileRoomInstance = null), roomInstance && (roomInstance.localParticipant.tracks.forEach(e => {
          e = e.track;
          e && (e.stop(), e.detach().forEach(e => e.remove()), e.disable(), roomInstance.localParticipant.unpublishTrack(e));
        }), roomInstance.disconnect(), roomInstance = null), aiProcessingInterval && (clearInterval(aiProcessingInterval), aiProcessingInterval = null), e?.entities?.filter(e => LockDownOptions.includes(e.key))?.length && unlockBrowserFromContent(), new Date());
      return registerEvent({
        eventType: "success",
        notify: !1,
        eventName: "recording_stopped_successfully",
        startAt: a
      }), showToast("success", "Recording stopped successfully"), "stop_recording";
    } catch (e) {
      void 0;
    }
  };
function VideoChat(e) {
  let t = getSecureFeatures(),
    o = convertDataIntoParse("session");
  var a = document.getElementById("webcam-container");
  let s = document.createElement("div"),
    n = document.createElement("div");
  function i(e, t) {
    if (t && e && "video" === e.kind) try {
      var o = e?.attach();
      o && (o.classList.add("video-attached"), t.appendChild(o));
    } catch (e) {
      void 0;
    } else void 0;
  }
  function r(e) {
    e && e.detach && e.detach().forEach(e => e.remove());
  }
  function c(e) {
    e.tracks.forEach(e => {
      e.isSubscribed && "video" === e.track.kind && i(e.track, n);
    }), e.on("trackSubscribed", e => {
      "video" === e.kind && (i(e, n), updatePersistData("session", {
        mobileRecordings: [...(o.mobileRecordings || []), e.sid]
      })), "audio" === e.kind && updatePersistData("session", {
        mobileAudios: [...(o.mobileAudios || []), e.sid]
      });
    }), e.on("trackUnsubscribed", e => {
      r(e);
    });
  }
  n.classList.add("remote-video"), a.appendChild(n);
  try {
    e.localParticipant.videoTracks.forEach(e => {
      e.track && "video" === e.track.kind && i(e.track, s);
    }), e.participants.forEach(e => {
      c(e);
    }), e.on("participantReconnecting", () => {
      findConfigs(["mobile_proctoring"], t?.entities).length ? (updatePersistData("preChecksSteps", {
        mobileConnection: !1,
        screenSharing: !1
      }), showToast("error", i18next.t("mobile_phone_disconneted"))) : (updatePersistData("preChecksSteps", {
        screenSharing: !1
      }), showToast("error", i18next.t("internet_connection_not_working"))), setTimeout(() => {
        window.startRecordingCallBack && window.startRecordingCallBack({
          message: "mobile_internet_connection_disconnected"
        });
      }, 4e3);
    }), e.on("participantConnected", e => {
      c(e);
    }), e.on("participantDisconnected", e => {
      e.tracks.forEach(e => {
        e.track && r(e.track);
      });
    });
  } catch (e) {
    void 0;
  }
}
export { startRecording, cleanupLocalVideo, stopAllRecordings };
import axios from "axios";
import { BASE_URL, CONTENT_TYPE } from "./constant";
let axiosInstance = axios.create({
  baseURL: BASE_URL,
  headers: {
    "content-type": CONTENT_TYPE.JSON
  }
});
export default axiosInstance;
let ASSET_URL = "https://mereos-corder.s3.eu-west-3.amazonaws.com/library_icons",
  BASE_URL = "production" === process.env.NODE_ENV ? "https://corder-api.mereos.eu" : "https://corder-api.mereos-datasafe.com/",
  SOCKET_URL = "wss://mobile-socket.mereos.eu/websocket/",
  CONTENT_TYPE = Object.freeze({
    JSON: "application/json",
    FORM_DATA: "multipart/form-data"
  }),
  initialSessionData = {
    aiEvents: [],
    start_time: null,
    submission_time: null,
    duration_taken: 0,
    identity_card: null,
    identity_photo: null,
    school: null,
    assessment: null,
    candidate: null,
    user_video_name: [],
    user_audio_name: [],
    screen_sharing_video_name: [],
    roomscan_recordings: [],
    session_id: null,
    collected_details: null,
    video_codec: null,
    video_extension: null,
    archive_id: null,
    attempt_id: null,
    sessionStatus: "Initiated",
    mobileRoomId: null,
    mobileRecordings: [],
    mobileAudios: [],
    mobileRoomSessionId: null,
    twilioToken: null,
    incident_level: null,
    converationId: null
  },
  preChecksSteps = {
    examPreparation: !1,
    diagnosticStep: !1,
    preValidation: !1,
    userPhoto: !1,
    identityCardPhoto: !1,
    audioDetection: !1,
    roomScanningVideo: !1,
    screenSharing: !1,
    examIndication: !1,
    examPrechecks: !1,
    mobileConnection: !1
  },
  LockDownOptions = ["detect_unfocus", "disable_downloading", "disable_printing", "force_full_screen", "detect_resizing_of_window", "disable_right_click", "disable_function_keys", "block_browser_screenshot", "disable_clipboard"],
  defaultTheme = {
    language: "en",
    theming: "#FF961B"
  },
  systemDiagnosticSteps = ["verify_desktop", "record_video", "record_audio", "verify_connection", "track_location", "enable_notifications", "record_room", "record_audio"],
  prevalidationSteps = ["record_video", "record_audio", "identity_card_requirement", "record_room"],
  languages = [{
    name: "English",
    value: "english",
    src: ASSET_URL + "/flag-of-uk.svg",
    alt: "",
    keyword: "en"
  }, {
    name: "Spanish",
    value: "spanish",
    src: ASSET_URL + "/flag-of-spain.svg",
    alt: "",
    keyword: "es"
  }, {
    name: "German",
    value: "german",
    src: ASSET_URL + "/flag-of-germany.svg",
    alt: "",
    keyword: "de"
  }, {
    name: "French",
    value: "french",
    src: ASSET_URL + "/flag-of-france.svg",
    alt: "",
    keyword: "fr"
  }, {
    name: "Portuguese (Brazil)",
    value: "portuguese_brazil",
    src: ASSET_URL + "/flag-of-brazil.svg",
    alt: "",
    keyword: "pt"
  }, {
    name: "Italian",
    value: "italian",
    src: ASSET_URL + "/flag-of-italy.svg",
    alt: "",
    keyword: "it"
  }];
export { ASSET_URL, BASE_URL, SOCKET_URL, CONTENT_TYPE, initialSessionData, preChecksSteps, LockDownOptions, defaultTheme, systemDiagnosticSteps, prevalidationSteps, languages };
import axios from "axios";
import { ASSET_URL, BASE_URL, prevalidationSteps, systemDiagnosticSteps } from "./constant";
import { addSectionSession, editSectionSession } from "../services/sessions.service";
import { getRecordingSid } from "../services/twilio.services";
import { createAiEvent } from "../services/ai-event.servicer";
import i18next from "i18next";
import { createEvent } from "../services/event.service";
import { closeModal } from "../ExamPrepreation/examPrechecks";
import { Notyf } from "notyf";
let dataURIToBlob = e => {
    var e = e.split(","),
      t = (0 <= e[0].indexOf("base64") ? atob : decodeURI)(e[1]),
      e = e[0].split(":")[1].split(";")[0],
      i = new Uint8Array(t.length);
    for (let e = 0; e < t.length; e++) i[e] = t.charCodeAt(e);
    return new Blob([i], {
      type: e
    });
  },
  getTimeInSeconds = ({
    isUTC: e = !1,
    inputDate: t = new Date()
  }) => {
    t = new Date(t);
    return e ? t.getTime() - 60 * t.getTimezoneOffset() * 1e3 : t.getTime();
  },
  checkCamera = () => new Promise(t => {
    navigator.mediaDevices && navigator.mediaDevices.getUserMedia ? navigator.mediaDevices.getUserMedia({
      video: !0
    }).then(e => {
      t(e);
    }).catch(() => {
      t(!1);
    }) : navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia ? (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia)({
      video: !0
    }, e => {
      t(e);
    }, () => {
      t(!1);
    }) : t(!1);
  }),
  getLocation = () => new Promise((i, e) => {
    navigator.geolocation.getCurrentPosition(e => {
      var {
        latitude: e,
        longitude: t
      } = e.coords;
      i({
        latitude: e,
        longitude: t
      });
    }, e => {
      i(!1);
    });
  }),
  checkNotification = () => new Promise((t, e) => {
    "Notification" in window ? "granted" === Notification.permission ? (showNotification({
      title: "New notification message from mereos!",
      body: "Hey mate, Ready for the test ? It will be starting soon."
    }), t(!0)) : "denied" !== Notification.permission && "default" !== Notification.permission || Notification.requestPermission().then(e => {
      "granted" === e ? (showNotification({
        title: "New notification message from mereos!",
        body: "Hey mate, Ready for the test ? It will be starting soon."
      }), t(!0)) : t(!1);
    }).catch(e => {
      void 0;
    }) : t(!1);
  }),
  getMultipleCameraDevices = () => new Promise((t, i) => {
    navigator.mediaDevices.enumerateDevices().then(e => {
      e = e.filter(e => "videoinput" === e.kind);
      e.sort((e, t) => {
        var i = e => {
          e = e.label.toLowerCase();
          return e.includes("webcam") || e.includes("camera") || e.includes("integrated") || e.includes("facetime") || e.includes("isight");
        };
        return i(e) ? -1 : i(t) ? 1 : 0;
      }), t(e);
    }).catch(e => {
      void 0, i(e);
    });
  }),
  showNotification = ({
    title: e,
    body: t
  }) => {
    try {
      var i = JSON.parse(localStorage.getItem("schoolTheme"))?.schoolLogo || ASSET_URL + "/mereos.png",
        n = new Notification(e, {
          body: t,
          icon: i
        });
      void 0;
    } catch (e) {
      void 0;
    }
  },
  detectMultipleScreens = async () => !!window.screen.isExtended,
  checkMicrophone = () => new Promise(t => {
    navigator.mediaDevices && navigator.mediaDevices.getUserMedia ? navigator.mediaDevices.getUserMedia({
      audio: !0
    }).then(e => {
      t(e);
    }).catch(() => {
      t(!1);
    }) : navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia ? (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia)({
      audio: !0
    }, e => {
      t(e);
    }, () => {
      t(!1);
    }) : t(!1);
  }),
  getNetworkUploadSpeed = async () => {
    try {
      var e,
        t = {
          test: "a".repeat(1048576)
        },
        i = new Date().getTime();
      if (await testUploadSpeed({
        test: "a".repeat(1048576)
      })) return e = (new Date().getTime() - i) / 1e3, {
        speedMbps: (8 * t.test.length / e / 1024 / 1024).toFixed(2)
      };
    } catch (e) {
      return void 0, !1;
    }
  },
  testUploadSpeed = async e => axios.post("https://dashboard-api.mereos-datasafe.com/general/test-upload-speed", {
    test: e
  }),
  registerEvent = ({
    eventName: e
  }) => {
    try {
      var t,
        i = convertDataIntoParse("session");
      if (void 0, i?.id) return t = {
        name: e,
        value: e,
        session_id: i?.id,
        start_at: 0 !== i?.sessionStartTime ? Math.round((getTimeInSeconds({
          isUTC: !0
        }) - i?.sessionStartTime) / 1e3) : 0
      }, createEvent(t);
    } catch (e) {
      void 0;
    }
  },
  updateThemeColor = () => {
    var e = JSON.parse(localStorage.getItem("schoolTheme"));
    document.documentElement.style.setProperty("--theme-color", e?.theming || "#FF961B");
  },
  loadZendeskWidget = () => {
    var e;
    (getSecureFeatures()?.entities || [])?.some(e => "chat_bot" === e.key) && ((e = document.createElement("script")).src = "https://static.zdassets.com/ekr/snippet.js?key=6542e7ef-41de-43ed-bc22-3d429a78ead3", e.async = !0, e.id = "ze-snippet", document.body.appendChild(e));
  },
  cleanupZendeskWidget = () => {
    var e = document.getElementById("ze-snippet");
    if (e && e.parentNode && e.parentNode.removeChild(e), window.zE && "function" == typeof window.zE) try {
      window.zE("messenger", "hide");
    } catch (e) {
      void 0;
    }
  },
  getAuthenticationToken = () => localStorage.getItem("mereosToken"),
  userRekognitionInfo = async e => axios.post(BASE_URL + "/general/rekognition/", e),
  convertDataIntoParse = e => JSON.parse(localStorage.getItem(e)),
  srcToData = async e => await new Promise(i => {
    fetch(e).then(e => e.blob()).then(e => {
      let t = new FileReader();
      t.onloadend = () => {
        i(t.result), t.result.replace("data:", "").replace(/^.+,/, "");
      }, t.readAsDataURL(e);
    });
  }),
  acceptableLabels = (e, t = 80) => {
    let i = ["cards", "document", "text", "id cards", "passport", "driving license", "license", "id", "identity", "doc", "cnic", "nic"],
      n = 0,
      o = 0;
    return e?.Labels?.forEach(e => {
      i.includes(e.Name.toLowerCase()) && (n += e.Confidence, o += 1);
    }), n / o > t;
  },
  acceptableText = (e, t = 80) => {
    let i = 0,
      n = 0;
    return e.TextDetections.forEach(e => {
      i += e.Confidence, n += 1;
    }), void 0, i / n >= t;
  },
  dataURLtoFile = (e, t) => {
    let i = e?.split(","),
      n = i[0].match(/:(.*?);/)[1],
      o = atob(i[i.length - 1]),
      a = o.length,
      r = new Uint8Array(a);
    for (; a--;) r[a] = o.charCodeAt(a);
    return new File([r], t, {
      type: n
    });
  },
  shareScreenFromContent = () => new Promise((t, i) => {
    navigator.mediaDevices.getDisplayMedia({
      video: {
        displaySurface: "monitor"
      }
    }).then(e => {
      t(e);
    }).catch(e => {
      i(e);
    });
  }),
  uploadFileInS3Folder = async e => {
    var t = localStorage.getItem("mereosToken"),
      i = new Headers(),
      n = new FormData(),
      e = (n.append("files", e.file, "" + Date.now()), n.append("folder_name", e.folderName), {
        headers: {
          ...i,
          token: t
        }
      });
    return axios.post(BASE_URL + "/general/candidate_upload_file/", n, e);
  },
  findConfigs = (e, t) => {
    var i,
      n = [];
    for (i of t) for (var o of e) if (o === i.key) {
      n.push(i);
      break;
    }
    return n;
  },
  getSecureFeatures = () => JSON.parse(localStorage.getItem("secureFeatures")),
  checkForMultipleMicrophones = async () => {
    try {
      await navigator.mediaDevices.getUserMedia({
        audio: !0
      });
      var e = (await navigator.mediaDevices.enumerateDevices()).filter(e => "audioinput" === e.kind);
      return void 0, 0 < e.length ? e : [];
    } catch (e) {
      return "NotAllowedError" === e.name || "PermissionDeniedError" === e.name ? void 0 : void 0, [];
    }
  },
  updatePersistData = (e, t) => {
    var i = localStorage.getItem(e);
    if (i) {
      var n,
        o = JSON.parse(i);
      for (n in t) t.hasOwnProperty(n) && (o[n] = t[n]);
      i = JSON.stringify(o);
      localStorage.setItem(e, i);
    } else void 0;
  },
  addSectionSessionRecord = (o, a) => new Promise(async (e, t) => {
    void 0;
    let i;
    (o?.user_video_name?.length || o?.user_audio_name?.length || o?.screen_sharing_video_name?.length || o?.mobileRecordings?.length || o?.mobileAudios?.length) && (n = [...o?.user_video_name, ...o?.user_audio_name, ...o?.screen_sharing_video_name, ...o?.mobileRecordings, ...o?.mobileAudios], i = n.length ? await getRecordingSid({
      source_id: [...o?.user_video_name, ...o?.user_audio_name, ...o?.screen_sharing_video_name, ...o?.mobileRecordings, ...o?.mobileAudios]
    }) : []);
    var n = {
        start_time: o?.sessionStartTime,
        submission_time: o?.submissionTime,
        duration_taken: o?.sessionStartTime ? getTimeInSeconds({
          isUTC: !0
        }) - o.sessionStartTime : 0,
        identity_card: o?.identityCard,
        room_scan_video: o?.room_scan_video,
        identity_photo: o?.candidatePhoto,
        school: a?.school?.id || "",
        assessment: o?.assessment?.id || 1,
        candidate: a?.candidate?.id,
        user_video_name: i?.data?.filter(t => o.user_video_name.find(e => e === t.source_sid))?.map(e => e.media_external_location) || [],
        user_audio_name: i?.data?.filter(t => o.user_audio_name.find(e => e === t.source_sid))?.map(e => e.media_external_location) || [],
        screen_sharing_video_name: i?.data?.filter(t => o.screen_sharing_video_name.find(e => e === t.source_sid))?.map(e => e.media_external_location) || [],
        roomscan_recordings: o?.roomScanRecordings,
        session_id: o?.sessionId,
        collected_details: {
          location: o?.location
        },
        status: o?.sessionStatus,
        video_codec: null,
        video_extension: null,
        archive_id: null,
        attempt_id: null,
        incident_level: o?.incident_level,
        mobile_audio_name: i?.data?.filter(t => o?.mobileAudios?.find(e => e === t.source_sid))?.map(e => e.media_external_location) || [],
        mobile_video_name: i?.data?.filter(t => o?.mobileRecordings?.find(e => e === t.source_sid))?.map(e => e.media_external_location) || []
      },
      n = (o?.id && (n.id = o?.id), o?.id ? await editSectionSession(n) : await addSectionSession(n));
    e(n);
  }),
  getDateTime = (e = "/", t = ":", i = " ", n = new Date()) => {
    n = new Date(n);
    return "" + n.getUTCFullYear() + e + ("0" + n.getUTCDate()).substr(-2) + e + ("0" + (n.getUTCMonth() + 1)).substr(-2) + i + ("0" + n.getUTCHours()).substr(-2) + t + ("0" + n.getUTCMinutes()).substr(-2) + t + ("0" + n.getUTCSeconds()).substr(-2);
  },
  registerAIEvent = async ({
    eventType: e,
    eventName: t,
    startTime: i,
    endTime: n
  }) => {
    try {
      var o = convertDataIntoParse("session"),
        a = (void 0, {
          name: t,
          start_at: i,
          end_at: n,
          value: t,
          created_at: getDateTime(),
          session_id: o?.id
        });
      await createAiEvent(a);
    } catch (e) {
      void 0;
    }
  },
  lockBrowserFromContent = o => new Promise(async (e, t) => {
    let i = {};
    for (var n of o) switch (n.name) {
      case "Disable Right Click":
        (await preventRightClick()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Disable Clipboard":
        (await disableCopyPasteCut()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Disable function keys":
        (await preventShortCuts()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Disable Printing":
        (await stopPrinting()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Detect unfocus":
        (await detectUnfocusOfTab()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Disable switch to other Apps":
        (await preventPreClosure()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Detect resizing of window":
        (await detectWindowResize(null)) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Verify Desktop":
        (await detectDualDisplay()) && (i = {
          ...i,
          [n.name]: !0
        });
        break;
      case "Force Full Screen":
        (await forceFullScreen()) && (i = {
          ...i,
          [n.name]: !0
        });
    }
    e(i);
  }),
  preventRightClick = () => new Promise((e, t) => {
    document.addEventListener("contextmenu", handleDefaultEvent), e(!0);
  }),
  disableCopyPasteCut = () => new Promise((e, t) => {
    "cut copy paste".split(" ").forEach(e => {
      window.addEventListener(e, handleDefaultEvent);
    }), e(!0);
  }),
  restoreRightClick = () => new Promise((e, t) => {
    document.removeEventListener("contextmenu", handleDefaultEvent, !0), e(!0);
  }),
  preventPreClosure = () => new Promise((e, t) => {
    e(!0);
  }),
  detectDualDisplay = () => new Promise((e, t) => {
    e(window.screen.isExtended);
  }),
  visibilityChangeHandler,
  detectUnfocusOfTab = () => new Promise(async (t, e) => {
    try {
      visibilityChangeHandler = () => {
        document.hidden ? (showToast("error", i18next.t("moved_away_from_page")), registerEvent({
          eventType: "error",
          notify: !1,
          eventName: "moved_away_from_page"
        })) : registerEvent({
          eventType: "success",
          notify: !1,
          eventName: "moved_back_to_page"
        });
      }, document.addEventListener("visibilitychange", visibilityChangeHandler), t(!0);
    } catch (e) {
      void 0, t(!1);
    }
  }),
  getMediaStream = (window.sharedMediaStream = null, async ({
    audio: e,
    video: t
  }) => {
    if (window.sharedMediaStream) return window.sharedMediaStream;
    try {
      return window.sharedMediaStream = await navigator.mediaDevices.getUserMedia({
        audio: e,
        video: t
      }), window.sharedMediaStream;
    } catch (e) {
      throw void 0, e;
    }
  }),
  stopMediaStream = () => {
    window.sharedMediaStream ? (window.sharedMediaStream.getTracks().forEach(e => e.stop()), window.sharedMediaStream = null, void 0) : void 0;
  },
  removeUnfocusListener = () => {
    visibilityChangeHandler && (document.removeEventListener("visibilitychange", visibilityChangeHandler), visibilityChangeHandler = null);
  },
  preventShortCuts = (i = []) => new Promise((e, t) => {
    document.onkeydown = e => {
      void 0;
      ((e = e || window.event).ctrlKey || e.metaKey) && -1 !== "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(e.key) && (e.preventDefault(), e.stopPropagation()), (e.ctrlKey || e.metaKey) && e.shiftKey && -1 !== "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(e.key) && (e.preventDefault(), e.stopPropagation()), ![27, 91, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 91, 44, 173, 174, 114, 145, 91].includes(e.keyCode) || 112 <= e.keyCode && e.keyCode <= 123 && i.includes(e.keyCode) || (e.preventDefault(), e.stopPropagation());
    }, e(!0);
  }),
  stopPrinting = () => new Promise((e, t) => {
    var i = `
			body {
				display: none;
				visibility: hidden;
			}
		`,
      n = document.head || document.getElementsByTagName("head")[0],
      o = document.createElement("style");
    n.appendChild(o), o.type = "text/css", o.media = "print", o.styleSheet ? o.styleSheet.cssText = i : o.appendChild(document.createTextNode(i)), e(!0);
  }),
  resizeTimeout,
  isResizing = !1,
  handleResize = () => {
    isResizing || (registerEvent({
      eventType: "error",
      notify: !1,
      eventName: "candidate_resized_window"
    }), void 0, isResizing = !0), clearTimeout(resizeTimeout), resizeTimeout = setTimeout(() => {
      registerEvent({
        eventType: "error",
        notify: !1,
        eventName: "candidate_resized_window"
      }), void 0, isResizing = !1;
    }, 500);
  },
  detectWindowResize = () => new Promise((e, t) => {
    window.addEventListener("resize", handleResize), e(!0);
  }),
  exitFullScreen = () => {
    try {
      document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
    } catch (e) {
      void 0;
    }
  },
  whiteBackgroundElement,
  forceFullScreen = (t = document.documentElement) => {
    try {
      "function" == typeof t.requestFullscreen ? t.requestFullscreen() : "function" == typeof t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : "function" == typeof t.msRequestFullscreen && t.msRequestFullscreen(), whiteBackgroundElement || ((whiteBackgroundElement = document.createElement("div")).id = "white-Background-Element", whiteBackgroundElement.style.backgroundColor = "white", whiteBackgroundElement.style.top = "0", whiteBackgroundElement.style.left = "0", whiteBackgroundElement.style.width = "100%", whiteBackgroundElement.style.height = "100%", whiteBackgroundElement.style.overflow = "auto", whiteBackgroundElement.style.zIndex = "1000", document.body.appendChild(whiteBackgroundElement));
      let e = () => {
        document.fullscreenElement || (whiteBackgroundElement && document.body.contains(whiteBackgroundElement) && (document.body.removeChild(whiteBackgroundElement), whiteBackgroundElement = null), document.removeEventListener("fullscreenchange", e));
      };
      document.addEventListener("fullscreenchange", e);
    } catch (e) {
      void 0;
    }
  },
  getCPUInfo = () => new Promise((e, t) => {
    e(navigator.hardwareConcurrency);
  }),
  getRAMInfo = () => new Promise((e, t) => {
    e(navigator.deviceMemory);
  }),
  handleDefaultEvent = e => {
    e.preventDefault(), e.stopPropagation();
  },
  unlockBrowserFromContent = () => {
    document.removeEventListener("contextmenu", handleDefaultEvent), "cut copy paste".split(" ").forEach(e => {
      window.removeEventListener(e, handleDefaultEvent);
    }), document.onkeydown = null;
    document.querySelectorAll('style[media="print"]').forEach(e => {
      e.textContent.includes("display: none") && e.textContent.includes("visibility: hidden") && e.remove();
    }), removeUnfocusListener(), window.removeEventListener("resize", handleResize), document.fullscreenElement && document.exitFullscreen();
    var e = document.getElementById("white-Background-Element");
    e && document.body.removeChild(e), window.alert = function () {}, "granted" === Notification.permission && document.querySelectorAll(".notification").forEach(e => {
      e.close();
    }), void 0;
  },
  handlePreChecksRedirection = () => {
    if ("session_resume" !== localStorage.getItem("precheckSetting")) return "ExamPreparation";
    {
      var t = convertDataIntoParse("preChecksSteps");
      let e = getSecureFeatures()?.entities || [];
      var i = t => e.some(e => e.key === t);
      return !t?.examPreparation && i("record_video") ? "ExamPreparation" : !t?.diagnosticStep && e?.filter(e => systemDiagnosticSteps.includes(e.key))?.length ? "runSystemDiagnostics" : !t?.preValidation && e?.filter(e => prevalidationSteps.includes(e.key))?.length ? "Prevalidationinstruction" : !t?.userPhoto && i("verify_candidate") ? "IdentityVerificationScreenOne" : !t?.identityCardPhoto && i("identity_card_requirement") ? "IdentityVerificationScreenTwo" : !t?.audioDetection && i("record_audio") ? "IdentityVerificationScreenThree" : !t?.roomScanningVideo && i("record_room") ? "IdentityVerificationScreenFour" : !t?.mobileConnection && i("mobile_proctoring") ? "MobileProctoring" : !t?.screenSharing || i("record_screen") ? "IdentityVerificationScreenFive" : void closeModal();
    }
  },
  findIncidentLevel = e => {
    let t = "low";
    void 0;
    for (var i of e || []) {
      var {
          endTime: i,
          startTime: n
        } = i,
        i = i - n;
      if (void 0, 10 < i) return "high";
      5 < i && (t = "medium");
    }
    return void 0, t;
  },
  showToast = (e, t) => {
    var i = new Notyf(),
      n = {
        message: t,
        duration: 3e3,
        position: {
          x: "right",
          y: "top"
        },
        ripple: !0
      };
    switch (e) {
      case "error":
        i.error(n);
        break;
      case "success":
        i.success(n);
        break;
      case "warning":
        i.warning(n);
        break;
      default:
        void 0;
    }
  };
export { dataURIToBlob, getTimeInSeconds, checkCamera, getLocation, checkNotification, getMultipleCameraDevices, showNotification, detectMultipleScreens, checkMicrophone, getNetworkUploadSpeed, testUploadSpeed, registerEvent, updateThemeColor, loadZendeskWidget, cleanupZendeskWidget, getAuthenticationToken, userRekognitionInfo, convertDataIntoParse, srcToData, acceptableLabels, acceptableText, dataURLtoFile, shareScreenFromContent, uploadFileInS3Folder, findConfigs, getSecureFeatures, checkForMultipleMicrophones, updatePersistData, addSectionSessionRecord, getDateTime, registerAIEvent, lockBrowserFromContent, preventRightClick, disableCopyPasteCut, restoreRightClick, preventPreClosure, detectDualDisplay, detectUnfocusOfTab, getMediaStream, stopMediaStream, removeUnfocusListener, preventShortCuts, stopPrinting, detectWindowResize, exitFullScreen, forceFullScreen, getCPUInfo, getRAMInfo, unlockBrowserFromContent, handlePreChecksRedirection, findIncidentLevel, showToast };
import i18next from "i18next";
i18next.init({
  lng: "en",
  resources: {
    it: {
      translation: require("./locales/it/translations.json")
    }
  }
}, t => {
  if (t) return void 0;
  updateTranslations();
});
let updateTranslations = () => {
  document.querySelectorAll("[data-i18n]").forEach(t => {
    var e = t.getAttribute("data-i18n");
    t.textContent = i18next.t(e);
  });
};
document.addEventListener("DOMContentLoaded", () => {
  updateTranslations();
});
import { SOCKET_URL } from "./constant";
import { v4 } from "uuid";
let generatePeerId = () => v4(),
  getGroupId = () => {
    var e = JSON.parse(localStorage.getItem("socketGroupId"));
    return e?.groupName ? e.groupName : (e = generatePeerId(), localStorage.setItem("socketGroupId", JSON.stringify({
      groupName: e
    })), e);
  },
  finalGroupName = getGroupId(),
  socket = new WebSocket(SOCKET_URL + "?groupName=" + finalGroupName);
export default socket;
let axios = {
  post: jest.fn(),
  create: jest.fn()
};
export default axios;

//# sourceMappingURL=mereos.min.js.map
